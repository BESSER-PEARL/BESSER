{# Template for CREATE TABLE statement #}
{% macro create_table(class_name, attributes, types, types_psql, types_mysql, sql_dialect) %}
    {% if sql_dialect == "postgres" %}
CREATE TABLE IF NOT EXISTS {{ class_name }} (
        {% if attributes | length == 0%}
    {{ class_name.lower() }}_id SERIAL PRIMARY KEY
        {% else %}
    {{ class_name.lower() }}_id SERIAL PRIMARY KEY,
            {% for attribute in attributes %}
                {% if loop.last %}
    {{ attribute.name }} {{ types_psql[attribute.type.name] }}
                {% else %}
    {{ attribute.name }} {{ types_psql[attribute.type.name] }},
                {% endif %}
            {% endfor %}
        {% endif %}
);
    {% elif sql_dialect == "mysql" %}
CREATE TABLE IF NOT EXISTS {{ class_name }} (
        {% if attributes | length == 0%}
    {{ class_name.lower() }}_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY
        {% else %}
    {{ class_name.lower() }}_id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            {% for attribute in attributes %}
                {% if loop.last %}
    {{ attribute.name }} {{ types_mysql[attribute.type.name] }}
                {% else %}
    {{ attribute.name }} {{ types_mysql[attribute.type.name] }},      
                {% endif %}
            {% endfor %}
        {% endif %}
) ENGINE=InnoDB;
    {% else %}
CREATE TABLE IF NOT EXISTS {{ class_name }} (
        {% if attributes | length == 0%}
    {{ class_name.lower() }}_id SERIAL PRIMARY KEY
        {% else %}
    {{ class_name.lower() }}_id SERIAL PRIMARY KEY,
            {% for attribute in attributes %}
                {% if loop.last %}
    {{ attribute.name }} {{ types[attribute.type.name] }}
                {% else %}
    {{ attribute.name }} {{ types[attribute.type.name] }},      
                {% endif %}
            {% endfor %}
        {% endif %}
);
    {% endif %}
{%- endmacro %}
{# Template for ALTER TABLE statement to add a reference #}
{% macro alter_table(class_name, reference_name, reference_table, reference_column, sql_dialect) %}
    {% if sql_dialect == "postgres" %}
ALTER TABLE {{ class_name }}
ADD COLUMN {{ reference_name }} INT REFERENCES {{ reference_table }}({{ reference_column.lower() }}_id);
    {% elif sql_dialect == "mysql" %}
ALTER TABLE {{ class_name }}
ADD COLUMN {{ reference_name }} INT UNSIGNED,
ADD CONSTRAINT fk_{{ class_name }}_{{ reference_name }}
    FOREIGN KEY ({{ reference_name }})
    REFERENCES {{ reference_table }} ({{ reference_column.lower() }}_id);
    {% else %}
ALTER TABLE {{ class_name }}
ADD COLUMN {{ reference_name }} INT REFERENCES {{ reference_table }}({{ reference_column.lower() }}_id);
    {% endif %}
{%- endmacro %}
{# Template for N:M relartion intermediate table #}
{% macro create_nm_table(class1_name, class2_name, sql_dialect, assoc_name, end1_name, end2_name) %}
    {% if sql_dialect == "postgres" %}
CREATE TABLE IF NOT EXISTS {{ assoc_name }} (
    {{ end1_name }} INT REFERENCES {{ class1_name }}({{ class1_name.lower() }}_id),
    {{ end2_name }} INT REFERENCES {{ class2_name }}({{ class2_name.lower() }}_id),
    PRIMARY KEY ({{ end1_name }}, {{ end2_name }})
);
    {% elif sql_dialect == "mysql" %}
CREATE TABLE IF NOT EXISTS {{ assoc_name }} (
    {{ end1_name }} INT UNSIGNED,
    {{ end2_name }} INT UNSIGNED,
    PRIMARY KEY ({{ end1_name }}, {{ end2_name }}),
    FOREIGN KEY ({{ end1_name }}) REFERENCES {{ class1_name }}({{ class1_name.lower() }}_id),
    FOREIGN KEY ({{ end2_name }}) REFERENCES {{ class2_name }}({{ class2_name.lower() }}_id)
);
    {% else %}
CREATE TABLE IF NOT EXISTS {{ assoc_name }} (
    {{ end1_name }} INT REFERENCES {{ class1_name }}({{ class1_name.lower() }}_id),
    {{ end2_name }} INT REFERENCES {{ class2_name }}({{ class2_name.lower() }}_id),
    PRIMARY KEY ({{ end1_name }}, {{ end2_name }})
);
    {% endif %}
{%- endmacro %}
{% macro add_generalization(class_name, generalization, sql_dialect) %}
    {% if sql_dialect == "postgres" %}
ALTER TABLE {{ class_name }}
ADD COLUMN {{ generalization.general.name }}_id INT REFERENCES {{ generalization.general.name }}({{ generalization.general.name }}_id);
    {% elif sql_dialect == "mysql" %}
ALTER TABLE {{ class_name }}
ADD COLUMN {{ generalization.general.name }}_id INT,
ADD CONSTRAINT generalization_{{ generalization.general.name }}
FOREIGN KEY ({{ generalization.general.name }}_id) REFERENCES {{ generalization.general.name }}({{ generalization.general.name }}_id);
    {% else %}
ALTER TABLE {{ class_name }}
ADD COLUMN {{ generalization.general.name }}_id INT REFERENCES {{ generalization.general.name }}({{ generalization.general.name }}_id);
    {% endif %}
{%- endmacro %}