# Generated from OCLs.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,82,920,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        1,0,1,0,5,0,31,8,0,10,0,12,0,34,9,0,1,1,1,1,1,1,1,1,3,1,40,8,1,1,
        1,3,1,43,8,1,1,1,5,1,46,8,1,10,1,12,1,49,9,1,1,1,3,1,52,8,1,1,1,
        3,1,55,8,1,1,1,3,1,58,8,1,1,1,3,1,61,8,1,1,1,3,1,64,8,1,1,1,3,1,
        67,8,1,1,1,3,1,70,8,1,1,1,3,1,73,8,1,1,1,3,1,76,8,1,1,1,3,1,79,8,
        1,1,1,3,1,82,8,1,1,1,3,1,85,8,1,1,2,1,2,3,2,89,8,2,1,2,1,2,1,2,3,
        2,94,8,2,1,3,1,3,1,3,3,3,99,8,3,1,3,1,3,3,3,103,8,3,1,3,3,3,106,
        8,3,5,3,108,8,3,10,3,12,3,111,9,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,119,
        8,3,10,3,12,3,122,9,3,1,3,3,3,125,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,3,4,136,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,158,8,5,1,6,1,6,1,7,1,
        7,3,7,164,8,7,1,7,1,7,3,7,168,8,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,5,7,181,8,7,10,7,12,7,184,9,7,1,7,1,7,1,7,1,7,1,7,
        1,7,3,7,192,8,7,1,7,1,7,1,7,5,7,197,8,7,10,7,12,7,200,9,7,1,7,1,
        7,1,7,1,7,1,7,1,7,3,7,208,8,7,1,7,1,7,1,7,5,7,213,8,7,10,7,12,7,
        216,9,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,224,8,7,1,7,3,7,227,8,7,1,7,
        1,7,5,7,231,8,7,10,7,12,7,234,9,7,1,7,1,7,1,7,1,7,1,7,3,7,241,8,
        7,1,7,5,7,244,8,7,10,7,12,7,247,9,7,1,7,3,7,250,8,7,1,7,1,7,5,7,
        254,8,7,10,7,12,7,257,9,7,1,7,1,7,1,7,1,7,1,7,3,7,264,8,7,1,7,5,
        7,267,8,7,10,7,12,7,270,9,7,1,7,3,7,273,8,7,1,7,1,7,5,7,277,8,7,
        10,7,12,7,280,9,7,1,7,1,7,1,7,1,7,1,7,3,7,287,8,7,1,7,5,7,290,8,
        7,10,7,12,7,293,9,7,1,7,3,7,296,8,7,1,7,1,7,1,7,1,7,1,7,3,7,303,
        8,7,1,7,5,7,306,8,7,10,7,12,7,309,9,7,1,7,3,7,312,8,7,1,7,1,7,1,
        7,1,7,1,7,3,7,319,8,7,1,7,5,7,322,8,7,10,7,12,7,325,9,7,1,7,3,7,
        328,8,7,1,7,5,7,331,8,7,10,7,12,7,334,9,7,1,7,1,7,5,7,338,8,7,10,
        7,12,7,341,9,7,1,7,5,7,344,8,7,10,7,12,7,347,9,7,1,7,3,7,350,8,7,
        1,7,1,7,3,7,354,8,7,1,7,3,7,357,8,7,5,7,359,8,7,10,7,12,7,362,9,
        7,1,7,5,7,365,8,7,10,7,12,7,368,9,7,1,7,5,7,371,8,7,10,7,12,7,374,
        9,7,1,7,3,7,377,8,7,1,7,3,7,380,8,7,1,7,5,7,383,8,7,10,7,12,7,386,
        9,7,1,7,1,7,5,7,390,8,7,10,7,12,7,393,9,7,1,7,5,7,396,8,7,10,7,12,
        7,399,9,7,1,7,3,7,402,8,7,1,7,1,7,3,7,406,8,7,1,7,3,7,409,8,7,5,
        7,411,8,7,10,7,12,7,414,9,7,1,7,5,7,417,8,7,10,7,12,7,420,9,7,1,
        7,5,7,423,8,7,10,7,12,7,426,9,7,1,7,3,7,429,8,7,1,7,3,7,432,8,7,
        1,7,1,7,4,7,436,8,7,11,7,12,7,437,1,7,1,7,4,7,442,8,7,11,7,12,7,
        443,1,7,3,7,447,8,7,1,7,3,7,450,8,7,1,7,5,7,453,8,7,10,7,12,7,456,
        9,7,1,7,1,7,1,7,3,7,461,8,7,1,7,1,7,3,7,465,8,7,1,7,3,7,468,8,7,
        5,7,470,8,7,10,7,12,7,473,9,7,1,7,1,7,5,7,477,8,7,10,7,12,7,480,
        9,7,1,7,3,7,483,8,7,1,7,3,7,486,8,7,1,7,5,7,489,8,7,10,7,12,7,492,
        9,7,1,7,1,7,5,7,496,8,7,10,7,12,7,499,9,7,1,7,5,7,502,8,7,10,7,12,
        7,505,9,7,1,7,3,7,508,8,7,1,7,1,7,3,7,512,8,7,1,7,3,7,515,8,7,5,
        7,517,8,7,10,7,12,7,520,9,7,1,7,5,7,523,8,7,10,7,12,7,526,9,7,1,
        7,5,7,529,8,7,10,7,12,7,532,9,7,1,7,3,7,535,8,7,1,7,1,7,3,7,539,
        8,7,1,7,5,7,542,8,7,10,7,12,7,545,9,7,1,7,1,7,5,7,549,8,7,10,7,12,
        7,552,9,7,1,7,5,7,555,8,7,10,7,12,7,558,9,7,1,7,3,7,561,8,7,1,7,
        1,7,3,7,565,8,7,1,7,3,7,568,8,7,5,7,570,8,7,10,7,12,7,573,9,7,1,
        7,5,7,576,8,7,10,7,12,7,579,9,7,1,7,5,7,582,8,7,10,7,12,7,585,9,
        7,1,7,3,7,588,8,7,1,7,3,7,591,8,7,1,7,5,7,594,8,7,10,7,12,7,597,
        9,7,1,7,1,7,5,7,601,8,7,10,7,12,7,604,9,7,1,7,5,7,607,8,7,10,7,12,
        7,610,9,7,1,7,3,7,613,8,7,1,7,1,7,3,7,617,8,7,1,7,3,7,620,8,7,5,
        7,622,8,7,10,7,12,7,625,9,7,1,7,5,7,628,8,7,10,7,12,7,631,9,7,1,
        7,5,7,634,8,7,10,7,12,7,637,9,7,1,7,3,7,640,8,7,1,7,1,7,1,7,4,7,
        645,8,7,11,7,12,7,646,1,7,3,7,650,8,7,1,7,1,7,3,7,654,8,7,1,7,3,
        7,657,8,7,5,7,659,8,7,10,7,12,7,662,9,7,1,7,4,7,665,8,7,11,7,12,
        7,666,1,7,3,7,670,8,7,1,7,1,7,1,7,1,7,4,7,676,8,7,11,7,12,7,677,
        1,7,3,7,681,8,7,1,7,1,7,1,7,1,7,3,7,687,8,7,1,7,1,7,3,7,691,8,7,
        1,7,3,7,694,8,7,5,7,696,8,7,10,7,12,7,699,9,7,1,7,4,7,702,8,7,11,
        7,12,7,703,1,7,3,7,707,8,7,1,7,3,7,710,8,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,3,7,719,8,7,4,7,721,8,7,11,7,12,7,722,1,7,1,7,1,7,1,7,3,7,
        729,8,7,1,7,3,7,732,8,7,1,7,1,7,1,7,1,7,1,7,3,7,739,8,7,1,7,1,7,
        1,7,1,7,1,7,4,7,746,8,7,11,7,12,7,747,1,7,3,7,751,8,7,1,7,1,7,1,
        7,1,7,1,7,3,7,758,8,7,1,7,1,7,1,7,1,7,1,7,3,7,765,8,7,1,7,1,7,1,
        7,1,7,1,7,1,7,3,7,773,8,7,1,7,1,7,1,7,1,7,5,7,779,8,7,10,7,12,7,
        782,9,7,1,7,3,7,785,8,7,1,7,1,7,5,7,789,8,7,10,7,12,7,792,9,7,1,
        7,3,7,795,8,7,1,7,3,7,798,8,7,1,7,1,7,4,7,802,8,7,11,7,12,7,803,
        1,7,3,7,807,8,7,1,7,1,7,5,7,811,8,7,10,7,12,7,814,9,7,1,7,5,7,817,
        8,7,10,7,12,7,820,9,7,1,7,1,7,3,7,824,8,7,1,7,3,7,827,8,7,1,7,1,
        7,1,7,3,7,832,8,7,1,7,1,7,1,7,1,7,3,7,838,8,7,1,7,3,7,841,8,7,1,
        7,1,7,3,7,845,8,7,1,7,1,7,3,7,849,8,7,1,7,1,7,1,7,3,7,854,8,7,1,
        7,1,7,3,7,858,8,7,1,7,3,7,861,8,7,1,7,1,7,3,7,865,8,7,1,8,1,8,1,
        8,5,8,870,8,8,10,8,12,8,873,9,8,1,8,1,8,1,8,1,8,5,8,879,8,8,10,8,
        12,8,882,9,8,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,5,11,893,
        8,11,10,11,12,11,896,9,11,1,11,1,11,3,11,900,8,11,1,11,1,11,3,11,
        904,8,11,3,11,906,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,
        12,916,8,12,1,13,1,13,1,13,0,0,14,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,0,6,3,0,3,4,68,70,76,76,1,0,2,4,1,0,6,9,2,0,35,35,46,46,4,
        0,23,23,33,34,36,40,46,51,2,0,72,72,78,80,1127,0,32,1,0,0,0,2,35,
        1,0,0,0,4,86,1,0,0,0,6,124,1,0,0,0,8,135,1,0,0,0,10,157,1,0,0,0,
        12,159,1,0,0,0,14,864,1,0,0,0,16,866,1,0,0,0,18,883,1,0,0,0,20,886,
        1,0,0,0,22,905,1,0,0,0,24,915,1,0,0,0,26,917,1,0,0,0,28,31,3,2,1,
        0,29,31,3,14,7,0,30,28,1,0,0,0,30,29,1,0,0,0,31,34,1,0,0,0,32,30,
        1,0,0,0,32,33,1,0,0,0,33,1,1,0,0,0,34,32,1,0,0,0,35,36,5,1,0,0,36,
        39,5,77,0,0,37,38,5,20,0,0,38,40,3,8,4,0,39,37,1,0,0,0,39,40,1,0,
        0,0,40,42,1,0,0,0,41,43,5,17,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,
        47,1,0,0,0,44,46,3,4,2,0,45,44,1,0,0,0,46,49,1,0,0,0,47,45,1,0,0,
        0,47,48,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,50,52,5,18,0,0,51,50,
        1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,55,5,14,0,0,54,53,1,0,0,0,
        54,55,1,0,0,0,55,57,1,0,0,0,56,58,3,6,3,0,57,56,1,0,0,0,57,58,1,
        0,0,0,58,60,1,0,0,0,59,61,5,20,0,0,60,59,1,0,0,0,60,61,1,0,0,0,61,
        63,1,0,0,0,62,64,3,8,4,0,63,62,1,0,0,0,63,64,1,0,0,0,64,66,1,0,0,
        0,65,67,5,15,0,0,66,65,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,70,
        5,77,0,0,69,68,1,0,0,0,69,70,1,0,0,0,70,72,1,0,0,0,71,73,5,16,0,
        0,72,71,1,0,0,0,72,73,1,0,0,0,73,75,1,0,0,0,74,76,5,20,0,0,75,74,
        1,0,0,0,75,76,1,0,0,0,76,78,1,0,0,0,77,79,7,0,0,0,78,77,1,0,0,0,
        78,79,1,0,0,0,79,81,1,0,0,0,80,82,5,20,0,0,81,80,1,0,0,0,81,82,1,
        0,0,0,82,84,1,0,0,0,83,85,3,14,7,0,84,83,1,0,0,0,84,85,1,0,0,0,85,
        3,1,0,0,0,86,88,7,1,0,0,87,89,5,77,0,0,88,87,1,0,0,0,88,89,1,0,0,
        0,89,90,1,0,0,0,90,91,5,20,0,0,91,93,3,14,7,0,92,94,5,19,0,0,93,
        92,1,0,0,0,93,94,1,0,0,0,94,5,1,0,0,0,95,96,5,77,0,0,96,109,5,15,
        0,0,97,99,5,24,0,0,98,97,1,0,0,0,98,99,1,0,0,0,99,100,1,0,0,0,100,
        102,3,14,7,0,101,103,5,24,0,0,102,101,1,0,0,0,102,103,1,0,0,0,103,
        105,1,0,0,0,104,106,5,21,0,0,105,104,1,0,0,0,105,106,1,0,0,0,106,
        108,1,0,0,0,107,98,1,0,0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,
        1,0,0,0,110,112,1,0,0,0,111,109,1,0,0,0,112,125,5,16,0,0,113,114,
        5,77,0,0,114,120,5,15,0,0,115,116,5,77,0,0,116,117,5,20,0,0,117,
        119,5,77,0,0,118,115,1,0,0,0,119,122,1,0,0,0,120,118,1,0,0,0,120,
        121,1,0,0,0,121,123,1,0,0,0,122,120,1,0,0,0,123,125,5,16,0,0,124,
        95,1,0,0,0,124,113,1,0,0,0,125,7,1,0,0,0,126,136,5,25,0,0,127,136,
        5,26,0,0,128,136,5,27,0,0,129,136,5,28,0,0,130,136,5,10,0,0,131,
        136,5,11,0,0,132,136,3,10,5,0,133,136,3,12,6,0,134,136,5,42,0,0,
        135,126,1,0,0,0,135,127,1,0,0,0,135,128,1,0,0,0,135,129,1,0,0,0,
        135,130,1,0,0,0,135,131,1,0,0,0,135,132,1,0,0,0,135,133,1,0,0,0,
        135,134,1,0,0,0,136,9,1,0,0,0,137,138,5,42,0,0,138,139,5,37,0,0,
        139,140,3,8,4,0,140,141,5,39,0,0,141,158,1,0,0,0,142,143,5,43,0,
        0,143,144,5,37,0,0,144,145,3,8,4,0,145,146,5,39,0,0,146,158,1,0,
        0,0,147,148,5,44,0,0,148,149,5,37,0,0,149,150,3,8,4,0,150,151,5,
        39,0,0,151,158,1,0,0,0,152,153,5,45,0,0,153,154,5,37,0,0,154,155,
        3,8,4,0,155,156,5,39,0,0,156,158,1,0,0,0,157,137,1,0,0,0,157,142,
        1,0,0,0,157,147,1,0,0,0,157,152,1,0,0,0,158,11,1,0,0,0,159,160,5,
        77,0,0,160,13,1,0,0,0,161,163,3,16,8,0,162,164,3,14,7,0,163,162,
        1,0,0,0,163,164,1,0,0,0,164,865,1,0,0,0,165,167,3,18,9,0,166,168,
        3,14,7,0,167,166,1,0,0,0,167,168,1,0,0,0,168,865,1,0,0,0,169,170,
        5,29,0,0,170,171,3,14,7,0,171,172,5,30,0,0,172,173,3,14,7,0,173,
        174,5,31,0,0,174,175,3,14,7,0,175,176,5,32,0,0,176,865,1,0,0,0,177,
        182,3,24,12,0,178,179,5,22,0,0,179,181,5,77,0,0,180,178,1,0,0,0,
        181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,185,1,0,0,0,
        184,182,1,0,0,0,185,186,5,22,0,0,186,187,5,53,0,0,187,188,5,15,0,
        0,188,189,3,8,4,0,189,191,5,16,0,0,190,192,3,14,7,0,191,190,1,0,
        0,0,191,192,1,0,0,0,192,865,1,0,0,0,193,198,3,24,12,0,194,195,5,
        22,0,0,195,197,5,77,0,0,196,194,1,0,0,0,197,200,1,0,0,0,198,196,
        1,0,0,0,198,199,1,0,0,0,199,201,1,0,0,0,200,198,1,0,0,0,201,202,
        5,22,0,0,202,203,5,52,0,0,203,204,5,15,0,0,204,205,3,8,4,0,205,207,
        5,16,0,0,206,208,3,14,7,0,207,206,1,0,0,0,207,208,1,0,0,0,208,865,
        1,0,0,0,209,214,3,24,12,0,210,211,5,22,0,0,211,213,5,77,0,0,212,
        210,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,
        217,1,0,0,0,216,214,1,0,0,0,217,218,5,22,0,0,218,219,5,54,0,0,219,
        220,5,15,0,0,220,221,3,8,4,0,221,223,5,16,0,0,222,224,3,14,7,0,223,
        222,1,0,0,0,223,224,1,0,0,0,224,865,1,0,0,0,225,227,3,24,12,0,226,
        225,1,0,0,0,226,227,1,0,0,0,227,232,1,0,0,0,228,229,5,22,0,0,229,
        231,5,77,0,0,230,228,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,
        233,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,236,5,75,0,0,236,
        237,5,56,0,0,237,238,5,15,0,0,238,240,5,16,0,0,239,241,3,14,7,0,
        240,239,1,0,0,0,240,241,1,0,0,0,241,245,1,0,0,0,242,244,5,16,0,0,
        243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,
        246,865,1,0,0,0,247,245,1,0,0,0,248,250,3,24,12,0,249,248,1,0,0,
        0,249,250,1,0,0,0,250,255,1,0,0,0,251,252,5,22,0,0,252,254,5,77,
        0,0,253,251,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,
        0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,5,75,0,0,259,260,5,57,
        0,0,260,261,5,15,0,0,261,263,5,16,0,0,262,264,3,14,7,0,263,262,1,
        0,0,0,263,264,1,0,0,0,264,268,1,0,0,0,265,267,5,16,0,0,266,265,1,
        0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,865,1,
        0,0,0,270,268,1,0,0,0,271,273,3,24,12,0,272,271,1,0,0,0,272,273,
        1,0,0,0,273,278,1,0,0,0,274,275,5,22,0,0,275,277,5,77,0,0,276,274,
        1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,281,
        1,0,0,0,280,278,1,0,0,0,281,282,5,75,0,0,282,283,5,58,0,0,283,284,
        5,15,0,0,284,286,5,16,0,0,285,287,3,14,7,0,286,285,1,0,0,0,286,287,
        1,0,0,0,287,291,1,0,0,0,288,290,5,16,0,0,289,288,1,0,0,0,290,293,
        1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,865,1,0,0,0,293,291,
        1,0,0,0,294,296,5,75,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,
        1,0,0,0,297,298,5,59,0,0,298,299,5,15,0,0,299,300,3,14,7,0,300,302,
        5,16,0,0,301,303,3,14,7,0,302,301,1,0,0,0,302,303,1,0,0,0,303,307,
        1,0,0,0,304,306,5,16,0,0,305,304,1,0,0,0,306,309,1,0,0,0,307,305,
        1,0,0,0,307,308,1,0,0,0,308,865,1,0,0,0,309,307,1,0,0,0,310,312,
        5,75,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,0,313,314,
        5,60,0,0,314,315,5,15,0,0,315,316,3,14,7,0,316,318,5,16,0,0,317,
        319,3,14,7,0,318,317,1,0,0,0,318,319,1,0,0,0,319,323,1,0,0,0,320,
        322,5,16,0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,
        324,1,0,0,0,324,865,1,0,0,0,325,323,1,0,0,0,326,328,5,75,0,0,327,
        326,1,0,0,0,327,328,1,0,0,0,328,332,1,0,0,0,329,331,5,15,0,0,330,
        329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
        335,1,0,0,0,334,332,1,0,0,0,335,339,5,44,0,0,336,338,5,17,0,0,337,
        336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,
        345,1,0,0,0,341,339,1,0,0,0,342,344,5,15,0,0,343,342,1,0,0,0,344,
        347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,360,1,0,0,0,347,
        345,1,0,0,0,348,350,5,24,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,
        351,1,0,0,0,351,353,3,14,7,0,352,354,5,24,0,0,353,352,1,0,0,0,353,
        354,1,0,0,0,354,356,1,0,0,0,355,357,5,21,0,0,356,355,1,0,0,0,356,
        357,1,0,0,0,357,359,1,0,0,0,358,349,1,0,0,0,359,362,1,0,0,0,360,
        358,1,0,0,0,360,361,1,0,0,0,361,366,1,0,0,0,362,360,1,0,0,0,363,
        365,5,18,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,
        367,1,0,0,0,367,372,1,0,0,0,368,366,1,0,0,0,369,371,5,16,0,0,370,
        369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,
        376,1,0,0,0,374,372,1,0,0,0,375,377,3,14,7,0,376,375,1,0,0,0,376,
        377,1,0,0,0,377,865,1,0,0,0,378,380,5,75,0,0,379,378,1,0,0,0,379,
        380,1,0,0,0,380,384,1,0,0,0,381,383,5,15,0,0,382,381,1,0,0,0,383,
        386,1,0,0,0,384,382,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,
        384,1,0,0,0,387,391,5,61,0,0,388,390,5,17,0,0,389,388,1,0,0,0,390,
        393,1,0,0,0,391,389,1,0,0,0,391,392,1,0,0,0,392,397,1,0,0,0,393,
        391,1,0,0,0,394,396,5,15,0,0,395,394,1,0,0,0,396,399,1,0,0,0,397,
        395,1,0,0,0,397,398,1,0,0,0,398,412,1,0,0,0,399,397,1,0,0,0,400,
        402,5,24,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,403,1,0,0,0,403,
        405,3,14,7,0,404,406,5,24,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,
        408,1,0,0,0,407,409,5,21,0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,
        411,1,0,0,0,410,401,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,
        413,1,0,0,0,413,418,1,0,0,0,414,412,1,0,0,0,415,417,5,16,0,0,416,
        415,1,0,0,0,417,420,1,0,0,0,418,416,1,0,0,0,418,419,1,0,0,0,419,
        424,1,0,0,0,420,418,1,0,0,0,421,423,5,18,0,0,422,421,1,0,0,0,423,
        426,1,0,0,0,424,422,1,0,0,0,424,425,1,0,0,0,425,428,1,0,0,0,426,
        424,1,0,0,0,427,429,3,14,7,0,428,427,1,0,0,0,428,429,1,0,0,0,429,
        865,1,0,0,0,430,432,5,75,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,
        433,1,0,0,0,433,435,5,55,0,0,434,436,5,15,0,0,435,434,1,0,0,0,436,
        437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,439,1,0,0,0,439,
        441,3,14,7,0,440,442,5,16,0,0,441,440,1,0,0,0,442,443,1,0,0,0,443,
        441,1,0,0,0,443,444,1,0,0,0,444,446,1,0,0,0,445,447,3,14,7,0,446,
        445,1,0,0,0,446,447,1,0,0,0,447,865,1,0,0,0,448,450,5,75,0,0,449,
        448,1,0,0,0,449,450,1,0,0,0,450,454,1,0,0,0,451,453,5,15,0,0,452,
        451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,
        457,1,0,0,0,456,454,1,0,0,0,457,458,5,45,0,0,458,471,5,17,0,0,459,
        461,5,24,0,0,460,459,1,0,0,0,460,461,1,0,0,0,461,462,1,0,0,0,462,
        464,3,14,7,0,463,465,5,24,0,0,464,463,1,0,0,0,464,465,1,0,0,0,465,
        467,1,0,0,0,466,468,5,21,0,0,467,466,1,0,0,0,467,468,1,0,0,0,468,
        470,1,0,0,0,469,460,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,
        472,1,0,0,0,472,474,1,0,0,0,473,471,1,0,0,0,474,478,5,18,0,0,475,
        477,5,16,0,0,476,475,1,0,0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,
        479,1,0,0,0,479,482,1,0,0,0,480,478,1,0,0,0,481,483,3,14,7,0,482,
        481,1,0,0,0,482,483,1,0,0,0,483,865,1,0,0,0,484,486,5,75,0,0,485,
        484,1,0,0,0,485,486,1,0,0,0,486,490,1,0,0,0,487,489,5,15,0,0,488,
        487,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,
        493,1,0,0,0,492,490,1,0,0,0,493,497,5,62,0,0,494,496,5,17,0,0,495,
        494,1,0,0,0,496,499,1,0,0,0,497,495,1,0,0,0,497,498,1,0,0,0,498,
        503,1,0,0,0,499,497,1,0,0,0,500,502,5,15,0,0,501,500,1,0,0,0,502,
        505,1,0,0,0,503,501,1,0,0,0,503,504,1,0,0,0,504,518,1,0,0,0,505,
        503,1,0,0,0,506,508,5,24,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,
        509,1,0,0,0,509,511,3,14,7,0,510,512,5,24,0,0,511,510,1,0,0,0,511,
        512,1,0,0,0,512,514,1,0,0,0,513,515,5,21,0,0,514,513,1,0,0,0,514,
        515,1,0,0,0,515,517,1,0,0,0,516,507,1,0,0,0,517,520,1,0,0,0,518,
        516,1,0,0,0,518,519,1,0,0,0,519,524,1,0,0,0,520,518,1,0,0,0,521,
        523,5,18,0,0,522,521,1,0,0,0,523,526,1,0,0,0,524,522,1,0,0,0,524,
        525,1,0,0,0,525,530,1,0,0,0,526,524,1,0,0,0,527,529,5,16,0,0,528,
        527,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,530,531,1,0,0,0,531,
        534,1,0,0,0,532,530,1,0,0,0,533,535,3,14,7,0,534,533,1,0,0,0,534,
        535,1,0,0,0,535,536,1,0,0,0,536,865,5,16,0,0,537,539,5,75,0,0,538,
        537,1,0,0,0,538,539,1,0,0,0,539,543,1,0,0,0,540,542,5,15,0,0,541,
        540,1,0,0,0,542,545,1,0,0,0,543,541,1,0,0,0,543,544,1,0,0,0,544,
        546,1,0,0,0,545,543,1,0,0,0,546,550,5,42,0,0,547,549,5,15,0,0,548,
        547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,
        556,1,0,0,0,552,550,1,0,0,0,553,555,5,17,0,0,554,553,1,0,0,0,555,
        558,1,0,0,0,556,554,1,0,0,0,556,557,1,0,0,0,557,571,1,0,0,0,558,
        556,1,0,0,0,559,561,5,24,0,0,560,559,1,0,0,0,560,561,1,0,0,0,561,
        562,1,0,0,0,562,564,3,14,7,0,563,565,5,24,0,0,564,563,1,0,0,0,564,
        565,1,0,0,0,565,567,1,0,0,0,566,568,5,21,0,0,567,566,1,0,0,0,567,
        568,1,0,0,0,568,570,1,0,0,0,569,560,1,0,0,0,570,573,1,0,0,0,571,
        569,1,0,0,0,571,572,1,0,0,0,572,577,1,0,0,0,573,571,1,0,0,0,574,
        576,5,18,0,0,575,574,1,0,0,0,576,579,1,0,0,0,577,575,1,0,0,0,577,
        578,1,0,0,0,578,583,1,0,0,0,579,577,1,0,0,0,580,582,5,16,0,0,581,
        580,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,
        587,1,0,0,0,585,583,1,0,0,0,586,588,3,14,7,0,587,586,1,0,0,0,587,
        588,1,0,0,0,588,865,1,0,0,0,589,591,5,75,0,0,590,589,1,0,0,0,590,
        591,1,0,0,0,591,595,1,0,0,0,592,594,5,15,0,0,593,592,1,0,0,0,594,
        597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,598,1,0,0,0,597,
        595,1,0,0,0,598,602,5,43,0,0,599,601,5,15,0,0,600,599,1,0,0,0,601,
        604,1,0,0,0,602,600,1,0,0,0,602,603,1,0,0,0,603,608,1,0,0,0,604,
        602,1,0,0,0,605,607,5,17,0,0,606,605,1,0,0,0,607,610,1,0,0,0,608,
        606,1,0,0,0,608,609,1,0,0,0,609,623,1,0,0,0,610,608,1,0,0,0,611,
        613,5,24,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,
        616,3,14,7,0,615,617,5,24,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,
        619,1,0,0,0,618,620,5,21,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,
        622,1,0,0,0,621,612,1,0,0,0,622,625,1,0,0,0,623,621,1,0,0,0,623,
        624,1,0,0,0,624,629,1,0,0,0,625,623,1,0,0,0,626,628,5,18,0,0,627,
        626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,
        635,1,0,0,0,631,629,1,0,0,0,632,634,5,16,0,0,633,632,1,0,0,0,634,
        637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,639,1,0,0,0,637,
        635,1,0,0,0,638,640,3,14,7,0,639,638,1,0,0,0,639,640,1,0,0,0,640,
        865,1,0,0,0,641,642,5,75,0,0,642,644,5,63,0,0,643,645,5,15,0,0,644,
        643,1,0,0,0,645,646,1,0,0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,
        660,1,0,0,0,648,650,5,24,0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,
        651,1,0,0,0,651,653,3,14,7,0,652,654,5,24,0,0,653,652,1,0,0,0,653,
        654,1,0,0,0,654,656,1,0,0,0,655,657,5,21,0,0,656,655,1,0,0,0,656,
        657,1,0,0,0,657,659,1,0,0,0,658,649,1,0,0,0,659,662,1,0,0,0,660,
        658,1,0,0,0,660,661,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,663,
        665,5,16,0,0,664,663,1,0,0,0,665,666,1,0,0,0,666,664,1,0,0,0,666,
        667,1,0,0,0,667,669,1,0,0,0,668,670,3,14,7,0,669,668,1,0,0,0,669,
        670,1,0,0,0,670,865,1,0,0,0,671,672,5,75,0,0,672,673,5,64,0,0,673,
        675,5,15,0,0,674,676,5,16,0,0,675,674,1,0,0,0,676,677,1,0,0,0,677,
        675,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,681,3,14,7,0,680,
        679,1,0,0,0,680,681,1,0,0,0,681,865,1,0,0,0,682,683,5,75,0,0,683,
        684,5,65,0,0,684,697,5,15,0,0,685,687,5,24,0,0,686,685,1,0,0,0,686,
        687,1,0,0,0,687,688,1,0,0,0,688,690,3,14,7,0,689,691,5,24,0,0,690,
        689,1,0,0,0,690,691,1,0,0,0,691,693,1,0,0,0,692,694,5,21,0,0,693,
        692,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,686,1,0,0,0,696,
        699,1,0,0,0,697,695,1,0,0,0,697,698,1,0,0,0,698,701,1,0,0,0,699,
        697,1,0,0,0,700,702,5,16,0,0,701,700,1,0,0,0,702,703,1,0,0,0,703,
        701,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,707,3,14,7,0,706,
        705,1,0,0,0,706,707,1,0,0,0,707,865,1,0,0,0,708,710,5,75,0,0,709,
        708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,712,7,2,0,0,712,
        720,5,15,0,0,713,714,5,77,0,0,714,715,5,20,0,0,715,716,5,77,0,0,
        716,718,1,0,0,0,717,719,5,21,0,0,718,717,1,0,0,0,718,719,1,0,0,0,
        719,721,1,0,0,0,720,713,1,0,0,0,721,722,1,0,0,0,722,720,1,0,0,0,
        722,723,1,0,0,0,723,724,1,0,0,0,724,725,5,41,0,0,725,726,3,14,7,
        0,726,728,5,16,0,0,727,729,3,14,7,0,728,727,1,0,0,0,728,729,1,0,
        0,0,729,865,1,0,0,0,730,732,5,75,0,0,731,730,1,0,0,0,731,732,1,0,
        0,0,732,733,1,0,0,0,733,734,7,2,0,0,734,735,5,15,0,0,735,736,3,14,
        7,0,736,738,5,16,0,0,737,739,3,14,7,0,738,737,1,0,0,0,738,739,1,
        0,0,0,739,865,1,0,0,0,740,741,5,75,0,0,741,742,5,66,0,0,742,743,
        5,15,0,0,743,745,3,14,7,0,744,746,5,16,0,0,745,744,1,0,0,0,746,747,
        1,0,0,0,747,745,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,751,
        3,14,7,0,750,749,1,0,0,0,750,751,1,0,0,0,751,865,1,0,0,0,752,753,
        5,75,0,0,753,754,5,67,0,0,754,755,5,15,0,0,755,757,5,16,0,0,756,
        758,3,14,7,0,757,756,1,0,0,0,757,758,1,0,0,0,758,865,1,0,0,0,759,
        760,5,75,0,0,760,761,5,68,0,0,761,762,5,15,0,0,762,764,5,16,0,0,
        763,765,3,14,7,0,764,763,1,0,0,0,764,765,1,0,0,0,765,865,1,0,0,0,
        766,767,5,75,0,0,767,768,5,71,0,0,768,769,5,15,0,0,769,770,3,14,
        7,0,770,772,5,16,0,0,771,773,3,14,7,0,772,771,1,0,0,0,772,773,1,
        0,0,0,773,865,1,0,0,0,774,775,5,76,0,0,775,776,5,20,0,0,776,865,
        3,14,7,0,777,779,5,15,0,0,778,777,1,0,0,0,779,782,1,0,0,0,780,778,
        1,0,0,0,780,781,1,0,0,0,781,784,1,0,0,0,782,780,1,0,0,0,783,785,
        3,24,12,0,784,783,1,0,0,0,784,785,1,0,0,0,785,790,1,0,0,0,786,787,
        5,22,0,0,787,789,5,77,0,0,788,786,1,0,0,0,789,792,1,0,0,0,790,788,
        1,0,0,0,790,791,1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,793,795,
        3,20,10,0,794,793,1,0,0,0,794,795,1,0,0,0,795,797,1,0,0,0,796,798,
        3,24,12,0,797,796,1,0,0,0,797,798,1,0,0,0,798,801,1,0,0,0,799,800,
        5,22,0,0,800,802,5,77,0,0,801,799,1,0,0,0,802,803,1,0,0,0,803,801,
        1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,807,3,14,7,0,806,805,
        1,0,0,0,806,807,1,0,0,0,807,865,1,0,0,0,808,812,3,24,12,0,809,811,
        5,22,0,0,810,809,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,
        1,0,0,0,813,818,1,0,0,0,814,812,1,0,0,0,815,817,5,77,0,0,816,815,
        1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,
        1,0,0,0,820,818,1,0,0,0,821,823,3,6,3,0,822,824,3,20,10,0,823,822,
        1,0,0,0,823,824,1,0,0,0,824,826,1,0,0,0,825,827,3,14,7,0,826,825,
        1,0,0,0,826,827,1,0,0,0,827,865,1,0,0,0,828,829,3,20,10,0,829,831,
        3,22,11,0,830,832,3,14,7,0,831,830,1,0,0,0,831,832,1,0,0,0,832,865,
        1,0,0,0,833,834,5,75,0,0,834,865,3,14,7,0,835,837,5,78,0,0,836,838,
        3,14,7,0,837,836,1,0,0,0,837,838,1,0,0,0,838,865,1,0,0,0,839,841,
        5,75,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,844,
        3,6,3,0,843,845,3,14,7,0,844,843,1,0,0,0,844,845,1,0,0,0,845,865,
        1,0,0,0,846,848,3,24,12,0,847,849,3,14,7,0,848,847,1,0,0,0,848,849,
        1,0,0,0,849,865,1,0,0,0,850,851,5,24,0,0,851,853,3,14,7,0,852,854,
        5,22,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,855,1,0,0,0,855,857,
        5,24,0,0,856,858,5,22,0,0,857,856,1,0,0,0,857,858,1,0,0,0,858,860,
        1,0,0,0,859,861,3,14,7,0,860,859,1,0,0,0,860,861,1,0,0,0,861,865,
        1,0,0,0,862,863,5,13,0,0,863,865,3,14,7,0,864,161,1,0,0,0,864,165,
        1,0,0,0,864,169,1,0,0,0,864,177,1,0,0,0,864,193,1,0,0,0,864,209,
        1,0,0,0,864,226,1,0,0,0,864,249,1,0,0,0,864,272,1,0,0,0,864,295,
        1,0,0,0,864,311,1,0,0,0,864,327,1,0,0,0,864,379,1,0,0,0,864,431,
        1,0,0,0,864,449,1,0,0,0,864,485,1,0,0,0,864,538,1,0,0,0,864,590,
        1,0,0,0,864,641,1,0,0,0,864,671,1,0,0,0,864,682,1,0,0,0,864,709,
        1,0,0,0,864,731,1,0,0,0,864,740,1,0,0,0,864,752,1,0,0,0,864,759,
        1,0,0,0,864,766,1,0,0,0,864,774,1,0,0,0,864,780,1,0,0,0,864,808,
        1,0,0,0,864,828,1,0,0,0,864,833,1,0,0,0,864,835,1,0,0,0,864,840,
        1,0,0,0,864,846,1,0,0,0,864,850,1,0,0,0,864,862,1,0,0,0,865,15,1,
        0,0,0,866,871,3,24,12,0,867,868,5,22,0,0,868,870,5,77,0,0,869,867,
        1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,872,1,0,0,0,872,874,
        1,0,0,0,873,871,1,0,0,0,874,875,3,20,10,0,875,880,3,24,12,0,876,
        877,5,22,0,0,877,879,5,77,0,0,878,876,1,0,0,0,879,882,1,0,0,0,880,
        878,1,0,0,0,880,881,1,0,0,0,881,17,1,0,0,0,882,880,1,0,0,0,883,884,
        7,3,0,0,884,885,3,24,12,0,885,19,1,0,0,0,886,887,7,4,0,0,887,21,
        1,0,0,0,888,906,5,78,0,0,889,894,3,24,12,0,890,891,5,22,0,0,891,
        893,3,24,12,0,892,890,1,0,0,0,893,896,1,0,0,0,894,892,1,0,0,0,894,
        895,1,0,0,0,895,906,1,0,0,0,896,894,1,0,0,0,897,906,3,14,7,0,898,
        900,5,24,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,
        903,3,14,7,0,902,904,5,24,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,
        906,1,0,0,0,905,888,1,0,0,0,905,889,1,0,0,0,905,897,1,0,0,0,905,
        899,1,0,0,0,906,23,1,0,0,0,907,916,3,26,13,0,908,916,5,5,0,0,909,
        916,3,6,3,0,910,911,5,15,0,0,911,912,3,14,7,0,912,913,5,16,0,0,913,
        916,1,0,0,0,914,916,5,77,0,0,915,907,1,0,0,0,915,908,1,0,0,0,915,
        909,1,0,0,0,915,910,1,0,0,0,915,914,1,0,0,0,916,25,1,0,0,0,917,918,
        7,5,0,0,918,27,1,0,0,0,173,30,32,39,42,47,51,54,57,60,63,66,69,72,
        75,78,81,84,88,93,98,102,105,109,120,124,135,157,163,167,182,191,
        198,207,214,223,226,232,240,245,249,255,263,268,272,278,286,291,
        295,302,307,311,318,323,327,332,339,345,349,353,356,360,366,372,
        376,379,384,391,397,401,405,408,412,418,424,428,431,437,443,446,
        449,454,460,464,467,471,478,482,485,490,497,503,507,511,514,518,
        524,530,534,538,543,550,556,560,564,567,571,577,583,587,590,595,
        602,608,612,616,619,623,629,635,639,646,649,653,656,660,666,669,
        677,680,686,690,693,697,703,706,709,718,722,728,731,738,747,750,
        757,764,772,780,784,790,794,797,803,806,812,818,823,826,831,837,
        840,844,848,853,857,860,864,871,880,894,899,903,905,915
    ]

class OCLsParser ( Parser ):

    grammarFileName = "OCLs.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'context'", "'inv'", "'pre'", "'post'", 
                     "'self'", "'forAll'", "'exists'", "'select'", "'collect'", 
                     "'OclAny'", "'OclVoid'", "<INVALID>", "'..'", "'::'", 
                     "'('", "')'", "'{'", "'}'", "';'", "':'", "','", "'.'", 
                     "'='", "'''", "'Boolean'", "'Integer'", "'Real'", "'String'", 
                     "'if'", "'then'", "'else'", "'endif'", "'and'", "'or'", 
                     "'not'", "'<>'", "'<'", "'<='", "'>'", "'>='", "'|'", 
                     "<INVALID>", "'Bag'", "'Sequence'", "'OrderedSet'", 
                     "'-'", "'+'", "'/'", "' '", "'xor'", "'implies'", "'oclAsType'", 
                     "'oclIsTypeOf'", "'oclIsKindOf'", "'allInstances'", 
                     "'isEmpty'", "'sum'", "'size'", "'includes'", "'excludes'", 
                     "'subSequence'", "'subOrderedSet'", "'prepend'", "'last'", 
                     "'append'", "'symmetricDifference'", "'first'", "'derive'", 
                     "'body'", "'init'", "'union'", "'null'", "'let'", "'in'", 
                     "<INVALID>", "'def'" ]

    symbolicNames = [ "<INVALID>", "CONTEXT", "INV", "PRE", "POST", "SELF", 
                      "FORALL", "EXISTS", "SELECT", "COLLECT", "OCLANY", 
                      "OCLVOID", "WS", "DoubleDots", "DoubleCOLON", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "SEMI", "COLON", "COMMA", 
                      "DOT", "EQUAL", "SingleQuote", "BOOLEAN_TYPE", "INTEGER_TYPE", 
                      "REAL_TYPE", "STRING_TYPE", "IF", "THEN", "ELSE", 
                      "ENDIF", "AND", "OR", "NOT", "NOTEQUAL", "LT", "LE", 
                      "GT", "GE", "PIPE", "SET", "BAG", "SEQUENCE", "ORDEREDSET", 
                      "MINUS", "PLUS", "Divide", "EMPTYSTRING", "XOR", "IMPLIES", 
                      "OCLASTYPE", "OCLISTYPEOF", "OCLISKINDOF", "ALLINSTANCES", 
                      "ISEMPTY", "SUM", "SIZE", "INCLUDES", "EXCLUDES", 
                      "SUBSEQUENCE", "SUBORDEREDSET", "PREPEND", "LAST", 
                      "APPEND", "SYMMETRICDIFFERENCE", "FIRST", "DERIVE", 
                      "BODY", "Init", "UNION", "NULL", "LET", "IN", "Arrow", 
                      "Def", "ID", "NUMBER", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                      "COMMENT", "LINE_COMMENT" ]

    RULE_oclFile = 0
    RULE_contextDeclaration = 1
    RULE_constraint = 2
    RULE_functionCall = 3
    RULE_type = 4
    RULE_collectionType = 5
    RULE_userDefinedType = 6
    RULE_expression = 7
    RULE_binaryExpression = 8
    RULE_unaryExpression = 9
    RULE_operator = 10
    RULE_numberORUserDefined = 11
    RULE_primaryExpression = 12
    RULE_literal = 13

    ruleNames =  [ "oclFile", "contextDeclaration", "constraint", "functionCall", 
                   "type", "collectionType", "userDefinedType", "expression", 
                   "binaryExpression", "unaryExpression", "operator", "numberORUserDefined", 
                   "primaryExpression", "literal" ]

    EOF = Token.EOF
    CONTEXT=1
    INV=2
    PRE=3
    POST=4
    SELF=5
    FORALL=6
    EXISTS=7
    SELECT=8
    COLLECT=9
    OCLANY=10
    OCLVOID=11
    WS=12
    DoubleDots=13
    DoubleCOLON=14
    LPAREN=15
    RPAREN=16
    LBRACE=17
    RBRACE=18
    SEMI=19
    COLON=20
    COMMA=21
    DOT=22
    EQUAL=23
    SingleQuote=24
    BOOLEAN_TYPE=25
    INTEGER_TYPE=26
    REAL_TYPE=27
    STRING_TYPE=28
    IF=29
    THEN=30
    ELSE=31
    ENDIF=32
    AND=33
    OR=34
    NOT=35
    NOTEQUAL=36
    LT=37
    LE=38
    GT=39
    GE=40
    PIPE=41
    SET=42
    BAG=43
    SEQUENCE=44
    ORDEREDSET=45
    MINUS=46
    PLUS=47
    Divide=48
    EMPTYSTRING=49
    XOR=50
    IMPLIES=51
    OCLASTYPE=52
    OCLISTYPEOF=53
    OCLISKINDOF=54
    ALLINSTANCES=55
    ISEMPTY=56
    SUM=57
    SIZE=58
    INCLUDES=59
    EXCLUDES=60
    SUBSEQUENCE=61
    SUBORDEREDSET=62
    PREPEND=63
    LAST=64
    APPEND=65
    SYMMETRICDIFFERENCE=66
    FIRST=67
    DERIVE=68
    BODY=69
    Init=70
    UNION=71
    NULL=72
    LET=73
    IN=74
    Arrow=75
    Def=76
    ID=77
    NUMBER=78
    STRING_LITERAL=79
    BOOLEAN_LITERAL=80
    COMMENT=81
    LINE_COMMENT=82

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class OclFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contextDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ContextDeclarationContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ContextDeclarationContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)


        def getRuleIndex(self):
            return OCLsParser.RULE_oclFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOclFile" ):
                listener.enterOclFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOclFile" ):
                listener.exitOclFile(self)




    def oclFile(self):

        localctx = OCLsParser.OclFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_oclFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 32
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441474150769634) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                self.state = 30
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1]:
                    self.state = 28
                    self.contextDeclaration()
                    pass
                elif token in [5, 6, 7, 8, 9, 13, 15, 22, 23, 24, 29, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 55, 59, 60, 61, 62, 72, 75, 76, 77, 78, 79, 80]:
                    self.state = 29
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 34
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContextDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OCLsParser.RULE_contextDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ContextExpContext(ContextDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ContextDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTEXT(self):
            return self.getToken(OCLsParser.CONTEXT, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COLON)
            else:
                return self.getToken(OCLsParser.COLON, i)
        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.TypeContext)
            else:
                return self.getTypedRuleContext(OCLsParser.TypeContext,i)

        def LBRACE(self):
            return self.getToken(OCLsParser.LBRACE, 0)
        def constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ConstraintContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ConstraintContext,i)

        def RBRACE(self):
            return self.getToken(OCLsParser.RBRACE, 0)
        def DoubleCOLON(self):
            return self.getToken(OCLsParser.DoubleCOLON, 0)
        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)

        def DERIVE(self):
            return self.getToken(OCLsParser.DERIVE, 0)
        def BODY(self):
            return self.getToken(OCLsParser.BODY, 0)
        def Init(self):
            return self.getToken(OCLsParser.Init, 0)
        def PRE(self):
            return self.getToken(OCLsParser.PRE, 0)
        def POST(self):
            return self.getToken(OCLsParser.POST, 0)
        def Def(self):
            return self.getToken(OCLsParser.Def, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContextExp" ):
                listener.enterContextExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContextExp" ):
                listener.exitContextExp(self)



    def contextDeclaration(self):

        localctx = OCLsParser.ContextDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_contextDeclaration)
        self._la = 0 # Token type
        try:
            localctx = OCLsParser.ContextExpContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 35
            self.match(OCLsParser.CONTEXT)
            self.state = 36
            self.match(OCLsParser.ID)
            self.state = 39
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 37
                self.match(OCLsParser.COLON)
                self.state = 38
                self.type_()


            self.state = 42
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 41
                self.match(OCLsParser.LBRACE)


            self.state = 47
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 44
                    self.constraint() 
                self.state = 49
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 51
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==18:
                self.state = 50
                self.match(OCLsParser.RBRACE)


            self.state = 54
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==14:
                self.state = 53
                self.match(OCLsParser.DoubleCOLON)


            self.state = 57
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 56
                self.functionCall()


            self.state = 60
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 59
                self.match(OCLsParser.COLON)


            self.state = 63
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 62
                self.type_()


            self.state = 66
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 65
                self.match(OCLsParser.LPAREN)


            self.state = 69
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 68
                self.match(OCLsParser.ID)


            self.state = 72
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==16:
                self.state = 71
                self.match(OCLsParser.RPAREN)


            self.state = 75
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 74
                self.match(OCLsParser.COLON)


            self.state = 78
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 77
                _la = self._input.LA(1)
                if not(_la==3 or _la==4 or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 263) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 81
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==20:
                self.state = 80
                self.match(OCLsParser.COLON)


            self.state = 84
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 83
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(OCLsParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def INV(self):
            return self.getToken(OCLsParser.INV, 0)

        def PRE(self):
            return self.getToken(OCLsParser.PRE, 0)

        def POST(self):
            return self.getToken(OCLsParser.POST, 0)

        def ID(self):
            return self.getToken(OCLsParser.ID, 0)

        def SEMI(self):
            return self.getToken(OCLsParser.SEMI, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint" ):
                listener.enterConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint" ):
                listener.exitConstraint(self)




    def constraint(self):

        localctx = OCLsParser.ConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 86
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 28) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 88
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 87
                self.match(OCLsParser.ID)


            self.state = 90
            self.match(OCLsParser.COLON)
            self.state = 91
            self.expression()
            self.state = 93
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 92
                self.match(OCLsParser.SEMI)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)


        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COLON)
            else:
                return self.getToken(OCLsParser.COLON, i)

        def getRuleIndex(self):
            return OCLsParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)




    def functionCall(self):

        localctx = OCLsParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 95
                self.match(OCLsParser.ID)
                self.state = 96
                self.match(OCLsParser.LPAREN)
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441474150769632) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 98
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                    if la_ == 1:
                        self.state = 97
                        self.match(OCLsParser.SingleQuote)


                    self.state = 100
                    self.expression()
                    self.state = 102
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        self.state = 101
                        self.match(OCLsParser.SingleQuote)


                    self.state = 105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 104
                        self.match(OCLsParser.COMMA)


                    self.state = 111
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 112
                self.match(OCLsParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 113
                self.match(OCLsParser.ID)
                self.state = 114
                self.match(OCLsParser.LPAREN)
                self.state = 120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==77:
                    self.state = 115
                    self.match(OCLsParser.ID)
                    self.state = 116
                    self.match(OCLsParser.COLON)
                    self.state = 117
                    self.match(OCLsParser.ID)
                    self.state = 122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 123
                self.match(OCLsParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN_TYPE(self):
            return self.getToken(OCLsParser.BOOLEAN_TYPE, 0)

        def INTEGER_TYPE(self):
            return self.getToken(OCLsParser.INTEGER_TYPE, 0)

        def REAL_TYPE(self):
            return self.getToken(OCLsParser.REAL_TYPE, 0)

        def STRING_TYPE(self):
            return self.getToken(OCLsParser.STRING_TYPE, 0)

        def OCLANY(self):
            return self.getToken(OCLsParser.OCLANY, 0)

        def OCLVOID(self):
            return self.getToken(OCLsParser.OCLVOID, 0)

        def collectionType(self):
            return self.getTypedRuleContext(OCLsParser.CollectionTypeContext,0)


        def userDefinedType(self):
            return self.getTypedRuleContext(OCLsParser.UserDefinedTypeContext,0)


        def SET(self):
            return self.getToken(OCLsParser.SET, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = OCLsParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_type)
        try:
            self.state = 135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 126
                self.match(OCLsParser.BOOLEAN_TYPE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 127
                self.match(OCLsParser.INTEGER_TYPE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 128
                self.match(OCLsParser.REAL_TYPE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 129
                self.match(OCLsParser.STRING_TYPE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 130
                self.match(OCLsParser.OCLANY)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 131
                self.match(OCLsParser.OCLVOID)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 132
                self.collectionType()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 133
                self.userDefinedType()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 134
                self.match(OCLsParser.SET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(OCLsParser.SET, 0)

        def LT(self):
            return self.getToken(OCLsParser.LT, 0)

        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)


        def GT(self):
            return self.getToken(OCLsParser.GT, 0)

        def BAG(self):
            return self.getToken(OCLsParser.BAG, 0)

        def SEQUENCE(self):
            return self.getToken(OCLsParser.SEQUENCE, 0)

        def ORDEREDSET(self):
            return self.getToken(OCLsParser.ORDEREDSET, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_collectionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionType" ):
                listener.enterCollectionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionType" ):
                listener.exitCollectionType(self)




    def collectionType(self):

        localctx = OCLsParser.CollectionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_collectionType)
        try:
            self.state = 157
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 137
                self.match(OCLsParser.SET)
                self.state = 138
                self.match(OCLsParser.LT)
                self.state = 139
                self.type_()
                self.state = 140
                self.match(OCLsParser.GT)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 142
                self.match(OCLsParser.BAG)
                self.state = 143
                self.match(OCLsParser.LT)
                self.state = 144
                self.type_()
                self.state = 145
                self.match(OCLsParser.GT)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 147
                self.match(OCLsParser.SEQUENCE)
                self.state = 148
                self.match(OCLsParser.LT)
                self.state = 149
                self.type_()
                self.state = 150
                self.match(OCLsParser.GT)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 152
                self.match(OCLsParser.ORDEREDSET)
                self.state = 153
                self.match(OCLsParser.LT)
                self.state = 154
                self.type_()
                self.state = 155
                self.match(OCLsParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserDefinedTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(OCLsParser.ID, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_userDefinedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserDefinedType" ):
                listener.enterUserDefinedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserDefinedType" ):
                listener.exitUserDefinedType(self)




    def userDefinedType(self):

        localctx = OCLsParser.UserDefinedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_userDefinedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self.match(OCLsParser.ID)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return OCLsParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrowexpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowexp" ):
                listener.enterArrowexp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowexp" ):
                listener.exitArrowexp(self)


    class COLLECTIONContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def PIPE(self):
            return self.getToken(OCLsParser.PIPE, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def FORALL(self):
            return self.getToken(OCLsParser.FORALL, 0)
        def EXISTS(self):
            return self.getToken(OCLsParser.EXISTS, 0)
        def SELECT(self):
            return self.getToken(OCLsParser.SELECT, 0)
        def COLLECT(self):
            return self.getToken(OCLsParser.COLLECT, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COLON)
            else:
                return self.getToken(OCLsParser.COLON, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCOLLECTION" ):
                listener.enterCOLLECTION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCOLLECTION" ):
                listener.exitCOLLECTION(self)


    class SETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(OCLsParser.SET, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSET" ):
                listener.enterSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSET" ):
                listener.exitSET(self)


    class PredefinedfunctionCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredefinedfunctionCall" ):
                listener.enterPredefinedfunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredefinedfunctionCall" ):
                listener.exitPredefinedfunctionCall(self)


    class UnaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.UnaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)


    class INCLUDESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INCLUDES(self):
            return self.getToken(OCLsParser.INCLUDES, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterINCLUDES" ):
                listener.enterINCLUDES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitINCLUDES" ):
                listener.exitINCLUDES(self)


    class SUBORDEREDSETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBORDEREDSET(self):
            return self.getToken(OCLsParser.SUBORDEREDSET, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUBORDEREDSET" ):
                listener.enterSUBORDEREDSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUBORDEREDSET" ):
                listener.exitSUBORDEREDSET(self)


    class PrimaryExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExp" ):
                listener.enterPrimaryExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExp" ):
                listener.exitPrimaryExp(self)


    class OCLISKINDOFContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def OCLISKINDOF(self):
            return self.getToken(OCLsParser.OCLISKINDOF, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLISKINDOF" ):
                listener.enterOCLISKINDOF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLISKINDOF" ):
                listener.exitOCLISKINDOF(self)


    class NumberContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NUMBER(self):
            return self.getToken(OCLsParser.NUMBER, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)


    class SYMMETRICDIFFERENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def SYMMETRICDIFFERENCE(self):
            return self.getToken(OCLsParser.SYMMETRICDIFFERENCE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSYMMETRICDIFFERENCE" ):
                listener.enterSYMMETRICDIFFERENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSYMMETRICDIFFERENCE" ):
                listener.exitSYMMETRICDIFFERENCE(self)


    class SEQUENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SEQUENCE(self):
            return self.getToken(OCLsParser.SEQUENCE, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSEQUENCE" ):
                listener.enterSEQUENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSEQUENCE" ):
                listener.exitSEQUENCE(self)


    class ORDEREDSETContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDEREDSET(self):
            return self.getToken(OCLsParser.ORDEREDSET, 0)
        def LBRACE(self):
            return self.getToken(OCLsParser.LBRACE, 0)
        def RBRACE(self):
            return self.getToken(OCLsParser.RBRACE, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterORDEREDSET" ):
                listener.enterORDEREDSET(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitORDEREDSET" ):
                listener.exitORDEREDSET(self)


    class DoubleDotsContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DoubleDots(self):
            return self.getToken(OCLsParser.DoubleDots, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoubleDots" ):
                listener.enterDoubleDots(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoubleDots" ):
                listener.exitDoubleDots(self)


    class EXCLUDESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXCLUDES(self):
            return self.getToken(OCLsParser.EXCLUDES, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEXCLUDES" ):
                listener.enterEXCLUDES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEXCLUDES" ):
                listener.exitEXCLUDES(self)


    class DERIVEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def DERIVE(self):
            return self.getToken(OCLsParser.DERIVE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDERIVE" ):
                listener.enterDERIVE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDERIVE" ):
                listener.exitDERIVE(self)


    class IDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterID" ):
                listener.enterID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitID" ):
                listener.exitID(self)


    class ALLINSTANCESContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALLINSTANCES(self):
            return self.getToken(OCLsParser.ALLINSTANCES, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterALLINSTANCES" ):
                listener.enterALLINSTANCES(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitALLINSTANCES" ):
                listener.exitALLINSTANCES(self)


    class IfContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(OCLsParser.IF, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def THEN(self):
            return self.getToken(OCLsParser.THEN, 0)
        def ELSE(self):
            return self.getToken(OCLsParser.ELSE, 0)
        def ENDIF(self):
            return self.getToken(OCLsParser.ENDIF, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf" ):
                listener.enterIf(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf" ):
                listener.exitIf(self)


    class OpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)

        def numberORUserDefined(self):
            return self.getTypedRuleContext(OCLsParser.NumberORUserDefinedContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOp" ):
                listener.enterOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOp" ):
                listener.exitOp(self)


    class SUBSEQUENCEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBSEQUENCE(self):
            return self.getToken(OCLsParser.SUBSEQUENCE, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUBSEQUENCE" ):
                listener.enterSUBSEQUENCE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUBSEQUENCE" ):
                listener.exitSUBSEQUENCE(self)


    class SIZEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def SIZE(self):
            return self.getToken(OCLsParser.SIZE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSIZE" ):
                listener.enterSIZE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSIZE" ):
                listener.exitSIZE(self)


    class SingleQuoteExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleQuoteExp" ):
                listener.enterSingleQuoteExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleQuoteExp" ):
                listener.exitSingleQuoteExp(self)


    class BAGContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BAG(self):
            return self.getToken(OCLsParser.BAG, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def LBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LBRACE)
            else:
                return self.getToken(OCLsParser.LBRACE, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RBRACE(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RBRACE)
            else:
                return self.getToken(OCLsParser.RBRACE, i)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBAG" ):
                listener.enterBAG(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBAG" ):
                listener.exitBAG(self)


    class OCLISTYPEOFContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def OCLISTYPEOF(self):
            return self.getToken(OCLsParser.OCLISTYPEOF, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLISTYPEOF" ):
                listener.enterOCLISTYPEOF(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLISTYPEOF" ):
                listener.exitOCLISTYPEOF(self)


    class SUMContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def SUM(self):
            return self.getToken(OCLsParser.SUM, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSUM" ):
                listener.enterSUM(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSUM" ):
                listener.exitSUM(self)


    class FIRSTContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def FIRST(self):
            return self.getToken(OCLsParser.FIRST, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFIRST" ):
                listener.enterFIRST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFIRST" ):
                listener.exitFIRST(self)


    class APPENDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def APPEND(self):
            return self.getToken(OCLsParser.APPEND, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAPPEND" ):
                listener.enterAPPEND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAPPEND" ):
                listener.exitAPPEND(self)


    class OCLASTYPEContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def OCLASTYPE(self):
            return self.getToken(OCLsParser.OCLASTYPE, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(OCLsParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOCLASTYPE" ):
                listener.enterOCLASTYPE(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOCLASTYPE" ):
                listener.exitOCLASTYPE(self)


    class CollectionExpressionVariableContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)
        def FORALL(self):
            return self.getToken(OCLsParser.FORALL, 0)
        def EXISTS(self):
            return self.getToken(OCLsParser.EXISTS, 0)
        def SELECT(self):
            return self.getToken(OCLsParser.SELECT, 0)
        def COLLECT(self):
            return self.getToken(OCLsParser.COLLECT, 0)
        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionExpressionVariable" ):
                listener.enterCollectionExpressionVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionExpressionVariable" ):
                listener.exitCollectionExpressionVariable(self)


    class LASTContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def LAST(self):
            return self.getToken(OCLsParser.LAST, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLAST" ):
                listener.enterLAST(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLAST" ):
                listener.exitLAST(self)


    class BinaryContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def binaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.BinaryExpressionContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)


    class ISEMPTYContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def ISEMPTY(self):
            return self.getToken(OCLsParser.ISEMPTY, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterISEMPTY" ):
                listener.enterISEMPTY(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitISEMPTY" ):
                listener.exitISEMPTY(self)


    class DefExpContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Def(self):
            return self.getToken(OCLsParser.Def, 0)
        def COLON(self):
            return self.getToken(OCLsParser.COLON, 0)
        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefExp" ):
                listener.enterDefExp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefExp" ):
                listener.exitDefExp(self)


    class FuncCallContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)

        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)
        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)
        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncCall" ):
                listener.enterFuncCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncCall" ):
                listener.exitFuncCall(self)


    class UNIONContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def UNION(self):
            return self.getToken(OCLsParser.UNION, 0)
        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUNION" ):
                listener.enterUNION(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUNION" ):
                listener.exitUNION(self)


    class PREPENDContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a OCLsParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Arrow(self):
            return self.getToken(OCLsParser.Arrow, 0)
        def PREPEND(self):
            return self.getToken(OCLsParser.PREPEND, 0)
        def LPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.LPAREN)
            else:
                return self.getToken(OCLsParser.LPAREN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.ExpressionContext,i)

        def RPAREN(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.RPAREN)
            else:
                return self.getToken(OCLsParser.RPAREN, i)
        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.COMMA)
            else:
                return self.getToken(OCLsParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPREPEND" ):
                listener.enterPREPEND(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPREPEND" ):
                listener.exitPREPEND(self)



    def expression(self):

        localctx = OCLsParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                localctx = OCLsParser.BinaryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 161
                self.binaryExpression()
                self.state = 163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
                if la_ == 1:
                    self.state = 162
                    self.expression()


                pass

            elif la_ == 2:
                localctx = OCLsParser.UnaryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 165
                self.unaryExpression()
                self.state = 167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                if la_ == 1:
                    self.state = 166
                    self.expression()


                pass

            elif la_ == 3:
                localctx = OCLsParser.IfContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 169
                self.match(OCLsParser.IF)
                self.state = 170
                self.expression()
                self.state = 171
                self.match(OCLsParser.THEN)
                self.state = 172
                self.expression()
                self.state = 173
                self.match(OCLsParser.ELSE)
                self.state = 174
                self.expression()
                self.state = 175
                self.match(OCLsParser.ENDIF)
                pass

            elif la_ == 4:
                localctx = OCLsParser.OCLISTYPEOFContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 177
                self.primaryExpression()
                self.state = 182
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 178
                        self.match(OCLsParser.DOT)
                        self.state = 179
                        self.match(OCLsParser.ID) 
                    self.state = 184
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

                self.state = 185
                self.match(OCLsParser.DOT)
                self.state = 186
                self.match(OCLsParser.OCLISTYPEOF)
                self.state = 187
                self.match(OCLsParser.LPAREN)
                self.state = 188
                self.type_()
                self.state = 189
                self.match(OCLsParser.RPAREN)
                self.state = 191
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
                if la_ == 1:
                    self.state = 190
                    self.expression()


                pass

            elif la_ == 5:
                localctx = OCLsParser.OCLASTYPEContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 193
                self.primaryExpression()
                self.state = 198
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 194
                        self.match(OCLsParser.DOT)
                        self.state = 195
                        self.match(OCLsParser.ID) 
                    self.state = 200
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                self.state = 201
                self.match(OCLsParser.DOT)
                self.state = 202
                self.match(OCLsParser.OCLASTYPE)
                self.state = 203
                self.match(OCLsParser.LPAREN)
                self.state = 204
                self.type_()
                self.state = 205
                self.match(OCLsParser.RPAREN)
                self.state = 207
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
                if la_ == 1:
                    self.state = 206
                    self.expression()


                pass

            elif la_ == 6:
                localctx = OCLsParser.OCLISKINDOFContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 209
                self.primaryExpression()
                self.state = 214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 210
                        self.match(OCLsParser.DOT)
                        self.state = 211
                        self.match(OCLsParser.ID) 
                    self.state = 216
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                self.state = 217
                self.match(OCLsParser.DOT)
                self.state = 218
                self.match(OCLsParser.OCLISKINDOF)
                self.state = 219
                self.match(OCLsParser.LPAREN)
                self.state = 220
                self.type_()
                self.state = 221
                self.match(OCLsParser.RPAREN)
                self.state = 223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 222
                    self.expression()


                pass

            elif la_ == 7:
                localctx = OCLsParser.ISEMPTYContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 225
                    self.primaryExpression()


                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 228
                    self.match(OCLsParser.DOT)
                    self.state = 229
                    self.match(OCLsParser.ID)
                    self.state = 234
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 235
                self.match(OCLsParser.Arrow)
                self.state = 236
                self.match(OCLsParser.ISEMPTY)
                self.state = 237
                self.match(OCLsParser.LPAREN)
                self.state = 238
                self.match(OCLsParser.RPAREN)
                self.state = 240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 239
                    self.expression()


                self.state = 245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 242
                        self.match(OCLsParser.RPAREN) 
                    self.state = 247
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

                pass

            elif la_ == 8:
                localctx = OCLsParser.SUMContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 248
                    self.primaryExpression()


                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 251
                    self.match(OCLsParser.DOT)
                    self.state = 252
                    self.match(OCLsParser.ID)
                    self.state = 257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 258
                self.match(OCLsParser.Arrow)
                self.state = 259
                self.match(OCLsParser.SUM)
                self.state = 260
                self.match(OCLsParser.LPAREN)
                self.state = 261
                self.match(OCLsParser.RPAREN)
                self.state = 263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 262
                    self.expression()


                self.state = 268
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 265
                        self.match(OCLsParser.RPAREN) 
                    self.state = 270
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

                pass

            elif la_ == 9:
                localctx = OCLsParser.SIZEContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 271
                    self.primaryExpression()


                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 274
                    self.match(OCLsParser.DOT)
                    self.state = 275
                    self.match(OCLsParser.ID)
                    self.state = 280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 281
                self.match(OCLsParser.Arrow)
                self.state = 282
                self.match(OCLsParser.SIZE)
                self.state = 283
                self.match(OCLsParser.LPAREN)
                self.state = 284
                self.match(OCLsParser.RPAREN)
                self.state = 286
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 285
                    self.expression()


                self.state = 291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 288
                        self.match(OCLsParser.RPAREN) 
                    self.state = 293
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

                pass

            elif la_ == 10:
                localctx = OCLsParser.INCLUDESContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 294
                    self.match(OCLsParser.Arrow)


                self.state = 297
                self.match(OCLsParser.INCLUDES)
                self.state = 298
                self.match(OCLsParser.LPAREN)
                self.state = 299
                self.expression()
                self.state = 300
                self.match(OCLsParser.RPAREN)
                self.state = 302
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 301
                    self.expression()


                self.state = 307
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 304
                        self.match(OCLsParser.RPAREN) 
                    self.state = 309
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                pass

            elif la_ == 11:
                localctx = OCLsParser.EXCLUDESContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 310
                    self.match(OCLsParser.Arrow)


                self.state = 313
                self.match(OCLsParser.EXCLUDES)
                self.state = 314
                self.match(OCLsParser.LPAREN)
                self.state = 315
                self.expression()
                self.state = 316
                self.match(OCLsParser.RPAREN)
                self.state = 318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 317
                    self.expression()


                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 320
                        self.match(OCLsParser.RPAREN) 
                    self.state = 325
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

                pass

            elif la_ == 12:
                localctx = OCLsParser.SEQUENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 326
                    self.match(OCLsParser.Arrow)


                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 329
                    self.match(OCLsParser.LPAREN)
                    self.state = 334
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 335
                self.match(OCLsParser.SEQUENCE)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 336
                    self.match(OCLsParser.LBRACE)
                    self.state = 341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 345
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 342
                        self.match(OCLsParser.LPAREN) 
                    self.state = 347
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 349
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                        if la_ == 1:
                            self.state = 348
                            self.match(OCLsParser.SingleQuote)


                        self.state = 351
                        self.expression()
                        self.state = 353
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                        if la_ == 1:
                            self.state = 352
                            self.match(OCLsParser.SingleQuote)


                        self.state = 356
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                        if la_ == 1:
                            self.state = 355
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 362
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

                self.state = 366
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 363
                        self.match(OCLsParser.RBRACE) 
                    self.state = 368
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

                self.state = 372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 369
                        self.match(OCLsParser.RPAREN) 
                    self.state = 374
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                self.state = 376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 375
                    self.expression()


                pass

            elif la_ == 13:
                localctx = OCLsParser.SUBSEQUENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 378
                    self.match(OCLsParser.Arrow)


                self.state = 384
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 381
                    self.match(OCLsParser.LPAREN)
                    self.state = 386
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 387
                self.match(OCLsParser.SUBSEQUENCE)
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 388
                    self.match(OCLsParser.LBRACE)
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 394
                        self.match(OCLsParser.LPAREN) 
                    self.state = 399
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

                self.state = 412
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 401
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                        if la_ == 1:
                            self.state = 400
                            self.match(OCLsParser.SingleQuote)


                        self.state = 403
                        self.expression()
                        self.state = 405
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                        if la_ == 1:
                            self.state = 404
                            self.match(OCLsParser.SingleQuote)


                        self.state = 408
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                        if la_ == 1:
                            self.state = 407
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 414
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                self.state = 418
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 415
                        self.match(OCLsParser.RPAREN) 
                    self.state = 420
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 421
                        self.match(OCLsParser.RBRACE) 
                    self.state = 426
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

                self.state = 428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 427
                    self.expression()


                pass

            elif la_ == 14:
                localctx = OCLsParser.ALLINSTANCESContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 430
                    self.match(OCLsParser.Arrow)


                self.state = 433
                self.match(OCLsParser.ALLINSTANCES)
                self.state = 435 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 434
                        self.match(OCLsParser.LPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 437 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 439
                self.expression()
                self.state = 441 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 440
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 443 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

                self.state = 446
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.expression()


                pass

            elif la_ == 15:
                localctx = OCLsParser.ORDEREDSETContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 448
                    self.match(OCLsParser.Arrow)


                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 451
                    self.match(OCLsParser.LPAREN)
                    self.state = 456
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 457
                self.match(OCLsParser.ORDEREDSET)
                self.state = 458
                self.match(OCLsParser.LBRACE)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441474150769632) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 460
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                    if la_ == 1:
                        self.state = 459
                        self.match(OCLsParser.SingleQuote)


                    self.state = 462
                    self.expression()
                    self.state = 464
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        self.state = 463
                        self.match(OCLsParser.SingleQuote)


                    self.state = 467
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 466
                        self.match(OCLsParser.COMMA)


                    self.state = 473
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 474
                self.match(OCLsParser.RBRACE)
                self.state = 478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 475
                        self.match(OCLsParser.RPAREN) 
                    self.state = 480
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                self.state = 482
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 481
                    self.expression()


                pass

            elif la_ == 16:
                localctx = OCLsParser.SUBORDEREDSETContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 484
                    self.match(OCLsParser.Arrow)


                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 487
                    self.match(OCLsParser.LPAREN)
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 493
                self.match(OCLsParser.SUBORDEREDSET)
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 494
                    self.match(OCLsParser.LBRACE)
                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 503
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 500
                        self.match(OCLsParser.LPAREN) 
                    self.state = 505
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                self.state = 518
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 507
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                        if la_ == 1:
                            self.state = 506
                            self.match(OCLsParser.SingleQuote)


                        self.state = 509
                        self.expression()
                        self.state = 511
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                        if la_ == 1:
                            self.state = 510
                            self.match(OCLsParser.SingleQuote)


                        self.state = 514
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==21:
                            self.state = 513
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 520
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==18:
                    self.state = 521
                    self.match(OCLsParser.RBRACE)
                    self.state = 526
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 530
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 527
                        self.match(OCLsParser.RPAREN) 
                    self.state = 532
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441474150769632) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 533
                    self.expression()


                self.state = 536
                self.match(OCLsParser.RPAREN)
                pass

            elif la_ == 17:
                localctx = OCLsParser.SETContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 537
                    self.match(OCLsParser.Arrow)


                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 540
                    self.match(OCLsParser.LPAREN)
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 546
                self.match(OCLsParser.SET)
                self.state = 550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 547
                        self.match(OCLsParser.LPAREN) 
                    self.state = 552
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 553
                    self.match(OCLsParser.LBRACE)
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 571
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 560
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                        if la_ == 1:
                            self.state = 559
                            self.match(OCLsParser.SingleQuote)


                        self.state = 562
                        self.expression()
                        self.state = 564
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                        if la_ == 1:
                            self.state = 563
                            self.match(OCLsParser.SingleQuote)


                        self.state = 567
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                        if la_ == 1:
                            self.state = 566
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 573
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 574
                        self.match(OCLsParser.RBRACE) 
                    self.state = 579
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 580
                        self.match(OCLsParser.RPAREN) 
                    self.state = 585
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                self.state = 587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 586
                    self.expression()


                pass

            elif la_ == 18:
                localctx = OCLsParser.BAGContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 589
                    self.match(OCLsParser.Arrow)


                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==15:
                    self.state = 592
                    self.match(OCLsParser.LPAREN)
                    self.state = 597
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 598
                self.match(OCLsParser.BAG)
                self.state = 602
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 599
                        self.match(OCLsParser.LPAREN) 
                    self.state = 604
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==17:
                    self.state = 605
                    self.match(OCLsParser.LBRACE)
                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 623
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 612
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                        if la_ == 1:
                            self.state = 611
                            self.match(OCLsParser.SingleQuote)


                        self.state = 614
                        self.expression()
                        self.state = 616
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                        if la_ == 1:
                            self.state = 615
                            self.match(OCLsParser.SingleQuote)


                        self.state = 619
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                        if la_ == 1:
                            self.state = 618
                            self.match(OCLsParser.COMMA)

                 
                    self.state = 625
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                self.state = 629
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 626
                        self.match(OCLsParser.RBRACE) 
                    self.state = 631
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 632
                        self.match(OCLsParser.RPAREN) 
                    self.state = 637
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

                self.state = 639
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self.expression()


                pass

            elif la_ == 19:
                localctx = OCLsParser.PREPENDContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 641
                self.match(OCLsParser.Arrow)
                self.state = 642
                self.match(OCLsParser.PREPEND)
                self.state = 644 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 643
                        self.match(OCLsParser.LPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 646 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441474150769632) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 649
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
                    if la_ == 1:
                        self.state = 648
                        self.match(OCLsParser.SingleQuote)


                    self.state = 651
                    self.expression()
                    self.state = 653
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
                    if la_ == 1:
                        self.state = 652
                        self.match(OCLsParser.SingleQuote)


                    self.state = 656
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 655
                        self.match(OCLsParser.COMMA)


                    self.state = 662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 664 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 663
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 666 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 669
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 668
                    self.expression()


                pass

            elif la_ == 20:
                localctx = OCLsParser.LASTContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 671
                self.match(OCLsParser.Arrow)
                self.state = 672
                self.match(OCLsParser.LAST)
                self.state = 673
                self.match(OCLsParser.LPAREN)
                self.state = 675 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 674
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 677 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

                self.state = 680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 679
                    self.expression()


                pass

            elif la_ == 21:
                localctx = OCLsParser.APPENDContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 682
                self.match(OCLsParser.Arrow)
                self.state = 683
                self.match(OCLsParser.APPEND)
                self.state = 684
                self.match(OCLsParser.LPAREN)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8687441474150769632) != 0) or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 505) != 0):
                    self.state = 686
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                    if la_ == 1:
                        self.state = 685
                        self.match(OCLsParser.SingleQuote)


                    self.state = 688
                    self.expression()
                    self.state = 690
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
                    if la_ == 1:
                        self.state = 689
                        self.match(OCLsParser.SingleQuote)


                    self.state = 693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 692
                        self.match(OCLsParser.COMMA)


                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 701 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 700
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 703 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

                self.state = 706
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
                if la_ == 1:
                    self.state = 705
                    self.expression()


                pass

            elif la_ == 22:
                localctx = OCLsParser.COLLECTIONContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 708
                    self.match(OCLsParser.Arrow)


                self.state = 711
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 712
                self.match(OCLsParser.LPAREN)
                self.state = 720 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 713
                    self.match(OCLsParser.ID)

                    self.state = 714
                    self.match(OCLsParser.COLON)
                    self.state = 715
                    self.match(OCLsParser.ID)
                    self.state = 718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==21:
                        self.state = 717
                        self.match(OCLsParser.COMMA)


                    self.state = 722 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==77):
                        break

                self.state = 724
                self.match(OCLsParser.PIPE)
                self.state = 725
                self.expression()
                self.state = 726
                self.match(OCLsParser.RPAREN)
                self.state = 728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 727
                    self.expression()


                pass

            elif la_ == 23:
                localctx = OCLsParser.CollectionExpressionVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 730
                    self.match(OCLsParser.Arrow)


                self.state = 733
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 960) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 734
                self.match(OCLsParser.LPAREN)
                self.state = 735
                self.expression()
                self.state = 736
                self.match(OCLsParser.RPAREN)
                self.state = 738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 737
                    self.expression()


                pass

            elif la_ == 24:
                localctx = OCLsParser.SYMMETRICDIFFERENCEContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 740
                self.match(OCLsParser.Arrow)
                self.state = 741
                self.match(OCLsParser.SYMMETRICDIFFERENCE)
                self.state = 742
                self.match(OCLsParser.LPAREN)
                self.state = 743
                self.expression()
                self.state = 745 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 744
                        self.match(OCLsParser.RPAREN)

                    else:
                        raise NoViableAltException(self)
                    self.state = 747 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

                self.state = 750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                if la_ == 1:
                    self.state = 749
                    self.expression()


                pass

            elif la_ == 25:
                localctx = OCLsParser.FIRSTContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 752
                self.match(OCLsParser.Arrow)
                self.state = 753
                self.match(OCLsParser.FIRST)
                self.state = 754
                self.match(OCLsParser.LPAREN)
                self.state = 755
                self.match(OCLsParser.RPAREN)
                self.state = 757
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                if la_ == 1:
                    self.state = 756
                    self.expression()


                pass

            elif la_ == 26:
                localctx = OCLsParser.DERIVEContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 759
                self.match(OCLsParser.Arrow)
                self.state = 760
                self.match(OCLsParser.DERIVE)
                self.state = 761
                self.match(OCLsParser.LPAREN)
                self.state = 762
                self.match(OCLsParser.RPAREN)
                self.state = 764
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                if la_ == 1:
                    self.state = 763
                    self.expression()


                pass

            elif la_ == 27:
                localctx = OCLsParser.UNIONContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 766
                self.match(OCLsParser.Arrow)
                self.state = 767
                self.match(OCLsParser.UNION)
                self.state = 768
                self.match(OCLsParser.LPAREN)
                self.state = 769
                self.expression()
                self.state = 770
                self.match(OCLsParser.RPAREN)
                self.state = 772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 771
                    self.expression()


                pass

            elif la_ == 28:
                localctx = OCLsParser.DefExpContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 774
                self.match(OCLsParser.Def)
                self.state = 775
                self.match(OCLsParser.COLON)
                self.state = 776
                self.expression()
                pass

            elif la_ == 29:
                localctx = OCLsParser.PrimaryExpContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 780
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 777
                        self.match(OCLsParser.LPAREN) 
                    self.state = 782
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

                self.state = 784
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                if la_ == 1:
                    self.state = 783
                    self.primaryExpression()


                self.state = 790
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,148,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 786
                        self.match(OCLsParser.DOT)
                        self.state = 787
                        self.match(OCLsParser.ID) 
                    self.state = 792
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,148,self._ctx)

                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4435386965164032) != 0):
                    self.state = 793
                    self.operator()


                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5 or _la==15 or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 481) != 0):
                    self.state = 796
                    self.primaryExpression()


                self.state = 801 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 799
                        self.match(OCLsParser.DOT)
                        self.state = 800
                        self.match(OCLsParser.ID)

                    else:
                        raise NoViableAltException(self)
                    self.state = 803 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                if la_ == 1:
                    self.state = 805
                    self.expression()


                pass

            elif la_ == 30:
                localctx = OCLsParser.FuncCallContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 808
                self.primaryExpression()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==22:
                    self.state = 809
                    self.match(OCLsParser.DOT)
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 815
                        self.match(OCLsParser.ID) 
                    self.state = 820
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

                self.state = 821
                self.functionCall()
                self.state = 823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 822
                    self.operator()


                self.state = 826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 825
                    self.expression()


                pass

            elif la_ == 31:
                localctx = OCLsParser.OpContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 828
                self.operator()
                self.state = 829
                self.numberORUserDefined()
                self.state = 831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                if la_ == 1:
                    self.state = 830
                    self.expression()


                pass

            elif la_ == 32:
                localctx = OCLsParser.ArrowexpContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 833
                self.match(OCLsParser.Arrow)
                self.state = 834
                self.expression()
                pass

            elif la_ == 33:
                localctx = OCLsParser.NumberContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 835
                self.match(OCLsParser.NUMBER)
                self.state = 837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 836
                    self.expression()


                pass

            elif la_ == 34:
                localctx = OCLsParser.PredefinedfunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75:
                    self.state = 839
                    self.match(OCLsParser.Arrow)


                self.state = 842
                self.functionCall()
                self.state = 844
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 843
                    self.expression()


                pass

            elif la_ == 35:
                localctx = OCLsParser.IDContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 846
                self.primaryExpression()
                self.state = 848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 847
                    self.expression()


                pass

            elif la_ == 36:
                localctx = OCLsParser.SingleQuoteExpContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 850
                self.match(OCLsParser.SingleQuote)
                self.state = 851
                self.expression()
                self.state = 853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==22:
                    self.state = 852
                    self.match(OCLsParser.DOT)


                self.state = 855
                self.match(OCLsParser.SingleQuote)
                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(OCLsParser.DOT)


                self.state = 860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self.expression()


                pass

            elif la_ == 37:
                localctx = OCLsParser.DoubleDotsContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 862
                self.match(OCLsParser.DoubleDots)
                self.state = 863
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,i)


        def operator(self):
            return self.getTypedRuleContext(OCLsParser.OperatorContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.ID)
            else:
                return self.getToken(OCLsParser.ID, i)

        def getRuleIndex(self):
            return OCLsParser.RULE_binaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpression" ):
                listener.enterBinaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpression" ):
                listener.exitBinaryExpression(self)




    def binaryExpression(self):

        localctx = OCLsParser.BinaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_binaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.primaryExpression()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 867
                self.match(OCLsParser.DOT)
                self.state = 868
                self.match(OCLsParser.ID)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 874
            self.operator()
            self.state = 875
            self.primaryExpression()
            self.state = 880
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 876
                    self.match(OCLsParser.DOT)
                    self.state = 877
                    self.match(OCLsParser.ID) 
                self.state = 882
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,0)


        def NOT(self):
            return self.getToken(OCLsParser.NOT, 0)

        def MINUS(self):
            return self.getToken(OCLsParser.MINUS, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)




    def unaryExpression(self):

        localctx = OCLsParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_unaryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            _la = self._input.LA(1)
            if not(_la==35 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 884
            self.primaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(OCLsParser.EQUAL, 0)

        def NOTEQUAL(self):
            return self.getToken(OCLsParser.NOTEQUAL, 0)

        def LT(self):
            return self.getToken(OCLsParser.LT, 0)

        def LE(self):
            return self.getToken(OCLsParser.LE, 0)

        def GT(self):
            return self.getToken(OCLsParser.GT, 0)

        def GE(self):
            return self.getToken(OCLsParser.GE, 0)

        def PLUS(self):
            return self.getToken(OCLsParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(OCLsParser.MINUS, 0)

        def EMPTYSTRING(self):
            return self.getToken(OCLsParser.EMPTYSTRING, 0)

        def Divide(self):
            return self.getToken(OCLsParser.Divide, 0)

        def AND(self):
            return self.getToken(OCLsParser.AND, 0)

        def OR(self):
            return self.getToken(OCLsParser.OR, 0)

        def XOR(self):
            return self.getToken(OCLsParser.XOR, 0)

        def IMPLIES(self):
            return self.getToken(OCLsParser.IMPLIES, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperator" ):
                listener.enterOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperator" ):
                listener.exitOperator(self)




    def operator(self):

        localctx = OCLsParser.OperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4435386965164032) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberORUserDefinedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(OCLsParser.NUMBER, 0)

        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(OCLsParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(OCLsParser.PrimaryExpressionContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.DOT)
            else:
                return self.getToken(OCLsParser.DOT, i)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def SingleQuote(self, i:int=None):
            if i is None:
                return self.getTokens(OCLsParser.SingleQuote)
            else:
                return self.getToken(OCLsParser.SingleQuote, i)

        def getRuleIndex(self):
            return OCLsParser.RULE_numberORUserDefined

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumberORUserDefined" ):
                listener.enterNumberORUserDefined(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumberORUserDefined" ):
                listener.exitNumberORUserDefined(self)




    def numberORUserDefined(self):

        localctx = OCLsParser.NumberORUserDefinedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_numberORUserDefined)
        try:
            self.state = 905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                self.match(OCLsParser.NUMBER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.primaryExpression()
                self.state = 894
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 890
                        self.match(OCLsParser.DOT)
                        self.state = 891
                        self.primaryExpression() 
                    self.state = 896
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                self.expression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                if la_ == 1:
                    self.state = 898
                    self.match(OCLsParser.SingleQuote)


                self.state = 901
                self.expression()
                self.state = 903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.match(OCLsParser.SingleQuote)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(OCLsParser.LiteralContext,0)


        def SELF(self):
            return self.getToken(OCLsParser.SELF, 0)

        def functionCall(self):
            return self.getTypedRuleContext(OCLsParser.FunctionCallContext,0)


        def LPAREN(self):
            return self.getToken(OCLsParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(OCLsParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(OCLsParser.RPAREN, 0)

        def ID(self):
            return self.getToken(OCLsParser.ID, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)




    def primaryExpression(self):

        localctx = OCLsParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_primaryExpression)
        try:
            self.state = 915
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 907
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 908
                self.match(OCLsParser.SELF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 909
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 910
                self.match(OCLsParser.LPAREN)
                self.state = 911
                self.expression()
                self.state = 912
                self.match(OCLsParser.RPAREN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 914
                self.match(OCLsParser.ID)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(OCLsParser.NUMBER, 0)

        def STRING_LITERAL(self):
            return self.getToken(OCLsParser.STRING_LITERAL, 0)

        def BOOLEAN_LITERAL(self):
            return self.getToken(OCLsParser.BOOLEAN_LITERAL, 0)

        def NULL(self):
            return self.getToken(OCLsParser.NULL, 0)

        def getRuleIndex(self):
            return OCLsParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = OCLsParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 449) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





