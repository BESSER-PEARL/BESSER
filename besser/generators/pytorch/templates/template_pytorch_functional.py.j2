{%- import "setup_nn_components.py.j2" as nn_components -%}
{%- set ti = namespace(torch_imported=False) -%}
import torch.nn as nn
{% if model.train_data is not none %}import torch {%- set ti.torch_imported = True %}
{% if model.train_data.input_format == "images" %}from torchvision import datasets, transforms 
from besser.generators.pytorch.utils import compute_mean_std{%- endif %}
{% if model.train_data.task_type != "regression" %}from sklearn.metrics import classification_report 
{%- else -%} from sklearn.metrics import mean_absolute_error {%- endif %} 
{% if model.train_data.input_format == "csv" %}import pandas as pd {%- endif %}
{%- endif %}
{%- for module_name, module_details in modules_details.items() -%}{% if ti.torch_imported == False and ((module_name.endswith("op") and module_details[0].startswith("torch")) or (module_details[-1].__class__.mro()[1].__name__ == "RNN" and module_details[-1].bidirectional and module_details[-1].return_type == "hidden"))%}import torch {%- set ti.torch_imported = True -%}{%- endif %}{%- endfor %}


{%- set activ_func_list = [] %}

# Define the network architecture
class NeuralNetwork(nn.Module):
    def __init__(self):
        super().__init__()
        {%- for module_name, module_details in modules_details.items() %}
        {%- if module_name.endswith("nn") %}
        self.{{ module_name.split('_')[0] }} = nn.Sequential(
            {%- for subnn_key, subnn_value in module_details.items() %}
                {%- if subnn_key != "in_out_variable" %}
            {{ subnn_value[0].split('=', 1)[1].strip() }},
                {%- endif -%}
            {%- endfor %}
        )
        {%- elif module_name.endswith("activ") %}
                {%- if module_details[0] not in activ_func_list %}
                {%- set _ = activ_func_list.append(module_details[0])%}
        {{ module_details[0] }}
                {%- endif -%}
        {%- elif module_name.endswith("layer") %}
        {{ module_details[0] }}
        {%- endif -%}
        {%- endfor %}
    {% set return_variable =  namespace(value="") %}
    def forward(self, x):
    {%- for module_name, module_details in modules_details.items() -%}
    {%- if module_name.endswith("op") %}
        {{ module_details[1] }} = {{ module_details[0] }}
    {%- elif module_name.endswith("nn") %} 
        {{ module_details["in_out_variable"] }} = self.{{ module_name.rsplit('_', 2)[0] }}({{ module_details["in_out_variable"] }})
    {%- else %}
        {%- if module_name.endswith("activ") %}
        {{ module_details[1] }} = self.{{ module_details[0].split('.', 1)[1].split('=', 1)[0].strip() }}({{ module_details[2] }})
        {%- elif module_details[-1].__class__.mro()[1].__name__ == "RNN" %}
            {%- if module_details[-1].return_type == "hidden" %}
                {%- if module_details[-1].__class__.__name__ == "LSTMLayer" %}
        _, ({{ module_details[1] }}, _) = self.{{ module_name.rsplit('_', 1)[0] }}({{ module_details[2] }})
                {%- else %}
        _, {{ module_details[1] }} = self.{{ module_name.rsplit('_', 1)[0] }}({{ module_details[2] }})
                {%- endif -%}
                {%- if module_details[-1].bidirectional %}
        {{ module_details[1] }} = torch.cat(({{ module_details[1] }}[-2], {{ module_details[1] }}[-1]), dim=1)
                {%- else %}
        {{ module_details[1] }} = {{ module_details[1] }}[-1]
                {%- endif -%}
            {%- elif module_details[-1].return_type == "full" %}
        {{ module_details[1] }}, _ = self.{{ module_name.rsplit('_', 1)[0] }}({{ module_details[2] }})
            {%- else %}
        {{ module_details[1] }}, _ = self.{{ module_name.rsplit('_', 1)[0] }}({{ module_details[2] }})
        {{ module_details[1] }} = {{ module_details[1] }}[:, -1, :]
            {%- endif -%}

        {%- else %} 
        {{ module_details[1] }} = self.{{ module_name.rsplit('_', 1)[0] }}({{ module_details[2] }})
        {%- endif -%}
    {%- endif -%}
    {%- if module_name.endswith("nn") %}
    {%- set return_variable.value =  module_details["in_out_variable"] %}
    {%- else %} 
    {%- set return_variable.value =  module_details[1] %}
    {%- endif -%}
    {%- endfor %}
        return {{ return_variable.value }}

{% if model.train_data is not none %}
# Dataset preparation
{{ nn_components.prepare_data(model.train_data, model.test_data, model.configuration) -}}

# Define the network, loss function, and optimiser
{{ model.name }} = NeuralNetwork()
criterion = {{ nn_components.get_loss_function(model.configuration) }}
optimiser = {{ nn_components.get_optimiser(model) }}

# Train the neural network
{{ nn_components.train_model(model, model.train_data.task_type) }}

# Evaluate the neural network
{{ nn_components.evaluate_model(model, model.train_data.task_type) }}
{%- endif -%}