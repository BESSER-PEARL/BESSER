{#- Django model template generator #}
{%- import "django_fields.py.j2" as django_fields %}
{#- django_fields.j2 should contain mappings to Django's ORM field types #}
from django.db import models

{%-set created_associations = []%}
{%- set assoc_class = []%}
{%- set one_to_many_associations = []%}
{#- Enumeration definition#}
{%- for enum in model.get_enumerations() %}
class {{ enum.name }}(models.TextChoices):
    {%- for literal in enum.literals %}
    {{ literal.name }} = '{{ literal.name }}', '{{ literal.name }}'
    {%- endfor %}

{%- endfor %}
{#- Model definition #}
{%- set processed_associations = [] %}
{%- for class_obj in model.classes_sorted_by_inheritance() %}
{%-set fk_list = []%}
{#- start of extract fk_list #}
{%- set generals = namespace(names=[]) %}
    {%- for parent in class_obj.parents() %}
      {%- set _ = generals.names.append(parent.name) %}
    {%- endfor %}
        {%- set inheritance = generals.names | join(', ') %}
        {%- for association in class_obj.associations %}
            {%- if association.ends|length == 2 and association.name not in processed_associations %}
                {%- set ns = namespace(end1=None, end2=None) %}
                {%- for end in association.ends %}
                  {%- set ns.end1=end if end.type.name == class_obj.name else ns.end1 %}
                  {%- set ns.end2=end if end.type.name != class_obj.name else ns.end2 %}
                {%- endfor %}
                    {%- set class1_name = ns.end1.type.name %}
                    {%- set class2_name = ns.end2.type.name %}
                        {%- if ns.end1.multiplicity.max > 1 and ns.end2.multiplicity.max == 1 %}
                           {%- set _ = fk_list.append(ns.end2.name.replace(' ', '_')) %}
                        {%- elif ns.end1.multiplicity.max > 1 and ns.end2.multiplicity.max > 1 %}
                        {%- elif ns.end1.multiplicity.max == 1 and ns.end2.multiplicity.max == 1 %}
                        {%- endif %}
            {%- endif %}
        {%- endfor %}
    {#- end of extract fk_list #}



    {%- set generals = namespace(names=[]) %}
    {%- for parent in class_obj.parents() %}
        {%- set _ = generals.names.append(parent.name) %}
    {%- endfor %}
    {%- set inheritance = generals.names | join(', ') %}


class {{ class_obj.name }}({{ inheritance | default('models.Model', true) }}):
    """
    Represents a {{ class_obj.name[0].lower() + class_obj.name[1:] }} in the system.
    """
{%- for attr in sort_by_timestamp(class_obj.attributes) %}
    {{ attr.name }} = {{ django_fields.get_field(attr.type, model.get_enumerations()) }}{%- if not loop.last %} {% endif %}
{%- endfor %}
    {%- for association in class_obj.associations %}
        {%- if association.ends|length == 2 and association.name not in processed_associations %}
            {%- set ns = namespace(end1=None, end2=None) %}
            {%- for end in association.ends %}
                {%- set ns.end1=end if end.type.name == class_obj.name else ns.end1 %}
                {%- set ns.end2=end if end.type.name != class_obj.name else ns.end2 %}
            {%- endfor %}
            {%- set class1_name = ns.end1.type.name %}
            {%- set class2_name = ns.end2.type.name %}
            {%- if ns.end1.multiplicity.max > 1 and ns.end2.multiplicity.max > 1 %}
            {#- N:M Relationship: Use ManyToManyField in Django #}
            {%- if fk_list|length == 1%}
    {{ ns.end2.name.replace(' ', '_') }} = models.ManyToManyField(
        '{{ class2_name }}', related_name='{{ ns.end1.name.replace(' ', '_') }}'{%- if ns.end2.multiplicity.min == 0 %}, blank=True, null=True{%- endif %})
            {%- set _ = created_associations.append(association.name) %}
            {%- else %}
            {%- if created_associations|length > 0%}
                 {%- if association.name in created_associations %}
                 {%- else %}
    {{ ns.end2.name.replace(' ', '_') }} = models.ManyToManyField(
        '{{ class2_name }}', related_name='{{ ns.end1.name.replace(' ', '_') }}'{%- if ns.end2.multiplicity.min == 0 %}, blank=True, null=True{%- endif %})
                 {%- endif %}
            {%- else %}
    {{ ns.end2.name.replace(' ', '_') }} = models.ManyToManyField(
        '{{ class2_name }}', related_name='{{ ns.end1.name.replace(' ', '_') }}'{%- if ns.end2.multiplicity.min == 0 %}, blank=True, null=True{%- endif %})
            {%- set _ = created_associations.append(association.name) %}
              {%- endif %}
            {%- endif %}
            {%- elif ns.end1.multiplicity.max > 1 and ns.end2.multiplicity.max == 1 %}
            {#- N:1 Relationship: Use ForeignKey in Django #}
    {{ ns.end2.name.replace(' ', '_') }} = models.ForeignKey(
        '{{ class2_name }}', on_delete=models.PROTECT, related_name='{{ class_obj.name[0].lower() + class_obj.name[1:] }}s'{%- if ns.end2.is_composite %}, on_delete=models.PROTECT{%- endif %}
                {%- if ns.end2.multiplicity.min == 0 %}, blank=True, null=True{%- endif %})
                {%- set _ = created_associations.append(association.name) %}
                {%- set _ = assoc_class.append(class1_name ~ '.' ~ association.name) %}
            {%- elif ns.end1.multiplicity.max == 1 and ns.end2.multiplicity.max == 1 %}
            {#- 1:1 Relationship: Use OneToOneField in Django #}
            {%- if created_associations|length > 0%}
               {%- if not association.name in created_associations %}
    {{ if asso_dict[association.name] == class_obj.name }} ###########
    {{ ns.end2.name.replace(' ', '_') }} = models.OneToOneField('{{ class2_name }}'{%- if ns.end2.is_composite %}, on_delete=models.CASCADE{% else %}, on_delete=models.CASCADE{%- endif %}
    {{ endif }} #########
    {%- if ns.end2.multiplicity.min == 0 %}, blank=True, null=True{%- endif %})
    {%- set _ = created_associations.append(association.name) %}
    {% set my_list = my_list + [class1_name ~ '.' ~ association.name] %}
    {%- set _ = assoc_class.append(class1_name ~ '.' ~ association.name) %}
              {%- endif%}
            {%- else %}
    {{ ns.end2.name.replace(' ', '_') }} = models.OneToOneField('{{ class2_name }}'{%- if ns.end2.is_composite %}, on_delete=models.CASCADE{% else %}, on_delete=models.CASCADE{%- endif %}
    {%- if ns.end2.multiplicity.min == 0 %}, blank=True, null=True{%- endif %})
    {%- set _ = created_associations.append(association.name) %}
    {% set my_list = my_list + [class1_name ~ '.' ~ association.name] %}
    {%- set _ = assoc_class.append(class1_name ~ '.' ~ association.name) %}
            {%- endif%}
            {%- endif %}
        {%- endif %}
    {%- endfor %}

    class Meta:
        verbose_name = "{{ class_obj.name[0].upper() + class_obj.name[1:] }}"
        verbose_name_plural = "{{ class_obj.name[0].upper() + class_obj.name[1:] }}s"

    {%- set attr_primitive_data_type = [] %}
        {%- for attr in sort_by_timestamp(class_obj.attributes) %}
            {%- if attr.type is is_primitive_data_type %}
              {%- set _ = attr_primitive_data_type.append(attr) %}
            {%- endif %}
        {%- endfor %}
    {%- if attr_primitive_data_type %}
    {%- set first_attr = attr_primitive_data_type[0] %}
    def __str__(self):
        """
        Returns a string representation of the {{ class_obj.name[0].lower() + class_obj.name[1:] }}
        """
        return str(self.{{ first_attr.name }})
    {%- endif %}
{%- endfor%}
# assoc_class={{ assoc_class }}

